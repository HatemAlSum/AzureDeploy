{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "string",
            "defaultValue": ""
        },
        "resourcegroup": {
            "type": "string",
            "defaultValue": ""
        },
        "subscriptionId": {
            "type": "string",
            "defaultValue": ""
        },
        "workspace": {
            "type": "string",
            "defaultValue": ""
        },
        "workspaceapiversion": {
            "type": "string",
            "defaultValue": ""
        }
    },
    "resources": [
        {
            "apiVersion": "[parameters('workspaceapiversion')]",
            "name": "[parameters('workspace')]",
            "type": "Microsoft.OperationalInsights/workspaces",
            "location": "[parameters('location')]",
            "id": "[Concat('/subscriptions/', parameters('subscriptionId'), '/resourceGroups/', parameters('resourcegroup'), '/providers/Microsoft.OperationalInsights/workspaces/', parameters('workspace'))]",
            "resources": [
                {
                    "apiVersion": "2015-11-01-preview",
                    "name": "Azure SAP HANA Monitor",
                    "type": "views",
                    "location": "[parameters('location')]",
                    "id": "[Concat('/subscriptions/', parameters('subscriptionId'), '/resourceGroups/', parameters('resourcegroup'), '/providers/Microsoft.OperationalInsights/workspaces/', parameters('workspace'),'/views/Azure SAP HANA Monitor')]",
                    "dependson": [
                        "[Concat('/subscriptions/', parameters('subscriptionId'), '/resourceGroups/', parameters('resourcegroup'), '/providers/Microsoft.OperationalInsights/workspaces/', parameters('workspace'))]"
                    ],
                    "properties": {
                        "Id": "Azure SAP HANA Monitor",
                        "Name": "Azure SAP HANA Monitor",
                        "Author": null,
                        "Source": "Local",
                        "Version": 2,
                        "Dashboard": [
                            {
                                "Id": "SingleQueryDonutBuilderBladeV1",
                                "Type": "Blade",
                                "Version": 0,
                                "Configuration": {
                                    "General": {
                                        "title": "HANA Data Collector Status",
                                        "newGroup": false,
                                        "icon": "",
                                        "useIcon": false
                                    },
                                    "Header": {
                                        "Title": "HANA Node Connectivity",
                                        "Subtitle": ""
                                    },
                                    "Donut": {
                                        "Query": "SAPHana_CL | where CollectorType_s == \"State\" and Category== \"Connectivity\" and SubCategory_s ==\"Host\" |where TimeGenerated > ago(30d) | summarize LastCall=arg_max(TimeGenerated,*) by HOST_s | project Host=HOST_s,MinSinceLastData=datetime_diff('Minute',now(),LastCall),IsCollectorOnline=iff(LastCall< ago(1h),\"Offline\",\"Online\"),LastStatus=Connection_s |summarize count(Host) by IsCollectorOnline",
                                        "CenterLegend": {
                                            "Text": "Total",
                                            "Operation": "Sum",
                                            "ArcsToSelect": []
                                        },
                                        "Options": {
                                            "colors": [
                                                "#00188f",
                                                "#0072c6",
                                                "#00bcf2"
                                            ],
                                            "valueColorMapping": [
                                                {
                                                    "value": "Offline",
                                                    "color": "#e81123"
                                                },
                                                {
                                                    "value": "Online",
                                                    "color": "#55d455"
                                                }
                                            ]
                                        },
                                        "NavigationSelect": {}
                                    },
                                    "List": {
                                        "Query": "let HanaNodes=SAPHana_CL | where CollectorType_s == \"Inventory\" | where Category==\"ReplicationStatus\" | where SERVICE_s == \"indexserver\" |summarize arg_max(TimeGenerated, *) by HOST_s, SERVICE_s, Instance_s |project Primary=HOST_s, Secondary=SECONDARY_HOST_s; let connectivitytable=SAPHana_CL | where CollectorType_s == \"State\" and Category== \"Connectivity\" and SubCategory_s ==\"Host\" |where TimeGenerated > ago(30d) | summarize LastCall=arg_max(TimeGenerated,*) by HOST_s,Database_s | project Host=HOST_s,DB=Database_s ,LastStatus=strcat(Connection_s,\":\",ErrorMessage_s), StatusNumeric=case(PingResult_s == \"Fail\",4,  LastCall< ago(30m),2,  Connection_s==\"Failed\",3,1) | extend isHA=case(Host == toscalar(HanaNodes |project Primary) , \"PrimaryNode\" ,Host == toscalar(HanaNodes |project Secondary) , \"SecondaryNode\",\"not_HA_Node\"); connectivitytable| where isHA==\"not_HA_Node\" |project  DB=strcat(DB,\"|\",Host),LastStatus ,StatusNumeric |union(connectivitytable | where isHA == \"PrimaryNode\" | join kind= leftouter (     connectivitytable     | where isHA == \"SecondaryNode\" ) on DB | extend LastStatus=iff( LastStatus contains \"Successful\" or LastStatus1 contains \"Successful\",\"Successful\" , strcat(LastStatus ,\" | \" ,LastStatus1 )) |project  DB=strcat(DB,\"|\",Host),LastStatus ,StatusNumeric)",
                                        "HideGraph": true,
                                        "enableSparklines": false,
                                        "ColumnsTitle": {
                                            "Name": "Host",
                                            "Value": "Status Numeric"
                                        },
                                        "Color": "#0072c6",
                                        "thresholds": {
                                            "isEnabled": true,
                                            "values": [
                                                {
                                                    "name": "Normal",
                                                    "threshold": "Default",
                                                    "color": "#009e49",
                                                    "isDefault": true
                                                },
                                                {
                                                    "name": "Warning",
                                                    "threshold": "1",
                                                    "color": "#ff8c00",
                                                    "isDefault": false
                                                },
                                                {
                                                    "name": "Error",
                                                    "threshold": "2",
                                                    "color": "#eb3c00",
                                                    "isDefault": false
                                                },
                                                {
                                                    "name": "Offline",
                                                    "threshold": "3",
                                                    "color": "#ba141a",
                                                    "isDefault": false
                                                }
                                            ]
                                        },
                                        "NameDSVSeparator": "",
                                        "NavigationQuery": "SAPHana_CL | where CollectorType_s == \"State\" and Category== \"Connectivity\" and SubCategory_s ==\"Host\" |where TimeGenerated > ago(30d) | summarize LastCall=arg_max(TimeGenerated,*) by HOST_s,Database_s | project Host=strcat(Database_s,\"|\",HOST_s),IsCollectorOnline=iff(LastCall< ago(1h),\"Offline\",\"Online\") ,LastStatus=strcat(Connection_s,\":\",ErrorMessage_s),MinSinceLastData=datetime_diff('Minute',now(),LastCall)",
                                        "NavigationSelect": {
                                            "NavigationQuery": "SAPHana_CL | where CollectorType_s == \"State\" and Category== \"Connectivity\" and SubCategory_s ==\"Host\" |where TimeGenerated > ago(30d) | summarize LastCall=arg_max(TimeGenerated,*) by HOST_s,Database_s | project Host=strcat(Database_s,\"|\",HOST_s),IsCollectorOnline=iff(LastCall< ago(1h),\"Offline\",\"Online\") ,LastStatus=strcat(Connection_s,\":\",ErrorMessage_s),MinSinceLastData=datetime_diff('Minute',now(),LastCall)"
                                        }
                                    }
                                }
                            },
                            {
                                "Id": "SingleQueryDonutBuilderBladeV1",
                                "Type": "Blade",
                                "Version": 0,
                                "Configuration": {
                                    "General": {
                                        "title": "SAP MiniCheck Results",
                                        "newGroup": false,
                                        "icon": "",
                                        "useIcon": false
                                    },
                                    "Header": {
                                        "Title": "Pass vs Fail",
                                        "Subtitle": "Linked to Config Checks Dashboard"
                                    },
                                    "Donut": {
                                        "Query": "SAPHana_CL | where Category == \"ConfigurationCheck\"  | where SubCategory_s <> \"SAP HANA MINI CHECKS\"  |where isnotempty(NAME_s) |summarize arg_max(TimeGenerated, *) by SubCategory_s,DESCRIPTION_s ,NAME_s |project Database_s,NAME_s,SubCategory_s,DESCRIPTION_s ,CONDITION_s,Value_d,RESULT_s |summarize count() by RESULT_s",
                                        "CenterLegend": {
                                            "Text": "Total",
                                            "Operation": "Sum",
                                            "ArcsToSelect": []
                                        },
                                        "Options": {
                                            "colors": [
                                                "#00188f",
                                                "#0072c6",
                                                "#00bcf2"
                                            ],
                                            "valueColorMapping": [
                                                {
                                                    "value": "Pass",
                                                    "color": "#55d455"
                                                },
                                                {
                                                    "value": "Fail",
                                                    "color": "#eb3c00"
                                                }
                                            ]
                                        },
                                        "NavigationSelect": {}
                                    },
                                    "List": {
                                        "Query": "SAPHana_CL | where Category == \"ConfigurationCheck\"  | where SubCategory_s <> \"SAP HANA MINI CHECKS\"  |where isnotempty(NAME_s) |summarize arg_max(TimeGenerated, *) by SubCategory_s,DESCRIPTION_s ,NAME_s |project Database_s,NAME_s,SubCategory_s,DESCRIPTION_s ,CONDITION_s,Value_d,RESULT_s |where RESULT_s==\"Fail\" |summarize count() by SubCategory_s",
                                        "HideGraph": true,
                                        "enableSparklines": false,
                                        "operation": "Summary",
                                        "ColumnsTitle": {
                                            "Name": "Failed Check Category",
                                            "Value": "Count"
                                        },
                                        "Color": "#0072c6",
                                        "thresholds": {
                                            "isEnabled": true,
                                            "values": [
                                                {
                                                    "name": "Normal",
                                                    "threshold": "Default",
                                                    "color": "#009e49",
                                                    "isDefault": true
                                                },
                                                {
                                                    "name": "Error",
                                                    "threshold": "0",
                                                    "color": "#ba141a",
                                                    "isDefault": false
                                                },
                                                {
                                                    "name": "Error",
                                                    "threshold": "90",
                                                    "color": "#ba141a",
                                                    "isDefault": false
                                                }
                                            ]
                                        },
                                        "NameDSVSeparator": "",
                                        "NavigationQuery": "SAPHana_CL | where Category == \"ConfigurationCheck\"  | where SubCategory_s <> \"SAP HANA MINI CHECKS\"  |where isnotempty(NAME_s) |summarize arg_max(TimeGenerated, *) by Database_s,SubCategory_s,DESCRIPTION_s ,NAME_s |project NAME_s,SubCategory_s,DESCRIPTION_s ,CONDITION_s,Value_d,RESULT_s |where RESULT_s==\"Fail\"",
                                        "NavigationSelect": {
                                            "Id": "SAP%20HANA%20Configuration%20Checks"
                                        },
                                        "Navigation": {
                                            "Host": "OMSPortal",
                                            "Link": {
                                                "Type": "Builder",
                                                "Id": "SAP%20HANA%20Configuration%20Checks"
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "Id": "SingleQueryDonutBuilderBladeV1",
                                "Type": "Blade",
                                "Version": 0,
                                "Configuration": {
                                    "General": {
                                        "title": "Host State",
                                        "newGroup": false,
                                        "icon": "",
                                        "useIcon": false
                                    },
                                    "Header": {
                                        "Title": "Instance Status",
                                        "Subtitle": ""
                                    },
                                    "Donut": {
                                        "Query": "SAPHana_CL |where CollectorType_s ==\"State\" |where Category == \"Host\" and isnotempty(HOST_s) |summarize LastCall=arg_max(TimeGenerated, *)by HOST_s | project Host=HOST_s,MinSinceLastData=datetime_diff('Minute',now(),LastCall),IsDataValid=iff(LastCall< ago(1h),\"Unkown\",\"Online\"),Status=case(LastCall< ago(30m),\"Unkown\", All_Started_s==\"OK\",\"Healthy\",\"Warning\") |summarize count() by Status",
                                        "CenterLegend": {
                                            "Text": "Total",
                                            "Operation": "Sum",
                                            "ArcsToSelect": []
                                        },
                                        "Options": {
                                            "colors": [
                                                "#ffb900",
                                                "#eb3c00",
                                                "#00bcf2"
                                            ],
                                            "valueColorMapping": [
                                                {
                                                    "value": "Healthy",
                                                    "color": "#55d455"
                                                },
                                                {
                                                    "value": "Warning",
                                                    "color": "#ff8c00"
                                                }
                                            ]
                                        },
                                        "NavigationSelect": {}
                                    },
                                    "List": {
                                        "Query": "SAPHana_CL |where CollectorType_s ==\"State\" |where Category == \"Host\" |summarize arg_max(TimeGenerated, *)by HOST_s |project Instance=strcat(Instance_ID_s,'-',Instance_Number_s),Component=\"All_Started\",Status=All_Started_s |union (SAPHana_CL |where CollectorType_s ==\"State\" |where Category == \"Host\" |summarize arg_max(TimeGenerated, *)by HOST_s |project Instance=strcat(Instance_ID_s,'-',Instance_Number_s),Component=\"CPU\",Status=CPU_s), (SAPHana_CL |where CollectorType_s ==\"State\" |where Category == \"Host\" |summarize arg_max(TimeGenerated, *)by HOST_s |project Instance=strcat(Instance_ID_s,'-',Instance_Number_s),Component=\"MEMORY\",Status=Memory_s), (SAPHana_CL |where CollectorType_s ==\"State\" |where Category == \"Host\" |summarize arg_max(TimeGenerated, *)by HOST_s |project Instance=strcat(Instance_ID_s,'-',Instance_Number_s),Component=\"DISKDATA\",Status=DISKDATA_s), (SAPHana_CL |where CollectorType_s ==\"State\" |where Category == \"Host\" |summarize arg_max(TimeGenerated, *)by HOST_s |project Instance=strcat(Instance_ID_s,'-',Instance_Number_s),Component=\"DISKLOG\",Status=DISKLOG_s), (SAPHana_CL |where CollectorType_s ==\"State\" |where Category == \"Host\" |summarize arg_max(TimeGenerated, *)by HOST_s |project Instance=strcat(Instance_ID_s,'-',Instance_Number_s),Component=\"DISKTRACE\",Status=DISKTRACE_s)",
                                        "HideGraph": true,
                                        "enableSparklines": false,
                                        "operation": "Summary",
                                        "ColumnsTitle": {
                                            "Name": "OS",
                                            "Value": ""
                                        },
                                        "Color": "#0072c6",
                                        "thresholds": {
                                            "isEnabled": false,
                                            "values": [
                                                {
                                                    "name": "Normal",
                                                    "threshold": "Default",
                                                    "color": "#009e49",
                                                    "isDefault": true
                                                },
                                                {
                                                    "name": "Warning",
                                                    "threshold": "60",
                                                    "color": "#fcd116",
                                                    "isDefault": false
                                                },
                                                {
                                                    "name": "Error",
                                                    "threshold": "90",
                                                    "color": "#ba141a",
                                                    "isDefault": false
                                                }
                                            ]
                                        },
                                        "NameDSVSeparator": "",
                                        "NavigationQuery": "SAPHana_CL |where CollectorType_s ==\"State\" |where Category == \"Host\" |summarize arg_max(TimeGenerated, *)by HOST_s |union( SAPHana_CL | where CollectorType_s == \"Inventory\" and Category==\"HostInfo\" |summarize arg_max(TimeGenerated, *)by HOST_s )",
                                        "NavigationSelect": {
                                            "NavigationQuery": "SAPHana_CL |where CollectorType_s ==\"State\" |where Category == \"Host\" |summarize arg_max(TimeGenerated, *)by HOST_s |union( SAPHana_CL | where CollectorType_s == \"Inventory\" and Category==\"HostInfo\" |summarize arg_max(TimeGenerated, *)by HOST_s )"
                                        }
                                    }
                                }
                            },
                            {
                                "Id": "SingleQueryDonutBuilderBladeV1",
                                "Type": "Blade",
                                "Version": 0,
                                "Configuration": {
                                    "General": {
                                        "title": "Services",
                                        "newGroup": false,
                                        "icon": "",
                                        "useIcon": false
                                    },
                                    "Header": {
                                        "Title": "Service Status",
                                        "Subtitle": ""
                                    },
                                    "Donut": {
                                        "Query": " let HanaConnectionTable= SAPHana_CL | where CollectorType_s == \"State\" | where Category == \"Connectivity\" |summarize arg_max(TimeGenerated,* ) by HOST_s |project Host=HOST_s,ConnectionStatus=Connection_s ; HanaConnectionTable |join kind= fullouter (     SAPHana_CL     | where CollectorType_s ==\"Inventory\" and Category== \"Services\"     | summarize arg_max(TimeGenerated, *) by HOST_s,SERVICE_NAME_s     |project Instance=Instance_s,Host=HOST_s, Status=ACTIVE_STATUS_s , Service=SERVICE_NAME_s ,Port=SQL_PORT_d ) on Host | project Host=strcat(Instance,\"; \",iff(isempty(Host),Host1 ,Host)) , Status=case(ConnectionStatus==\"Failed\", \"Unkown\", Status==\"YES\", \"Active\", Status), Service=iff(isempty(Service),\"Unkown\",Service) |summarize count(Service) by Status",
                                        "CenterLegend": {
                                            "Text": "Total",
                                            "Operation": "Sum",
                                            "ArcsToSelect": []
                                        },
                                        "Options": {
                                            "colors": [
                                                "#fcd116",
                                                "#dd5900",
                                                "#e81123"
                                            ],
                                            "valueColorMapping": [
                                                {
                                                    "value": "Active",
                                                    "color": "#55d455"
                                                }
                                            ]
                                        },
                                        "NavigationSelect": {}
                                    },
                                    "List": {
                                        "Query": "let HanaConnectionTable= SAPHana_CL | where CollectorType_s == \"State\" | where Category == \"Connectivity\" |summarize arg_max(TimeGenerated,* ) by HOST_s |project Host=HOST_s,ConnectionStatus=Connection_s ; HanaConnectionTable |join kind= fullouter (     SAPHana_CL     | where CollectorType_s ==\"Inventory\" and Category== \"Services\"     | summarize arg_max(TimeGenerated, *) by HOST_s,SERVICE_NAME_s     |project Instance=Instance_s,Host=HOST_s, Status=ACTIVE_STATUS_s , Service=SERVICE_NAME_s ,Port=SQL_PORT_d ) on Host | project Host=strcat(Instance,\"; \",iff(isempty(Host),Host1 ,Host)) , Status=case(ConnectionStatus==\"Failed\", \"Unkown\", Status==\"YES\", \"Active\", Status), Service=iff(isempty(Service),\"Unkown\",Service)",
                                        "HideGraph": true,
                                        "enableSparklines": false,
                                        "operation": "Summary",
                                        "ColumnsTitle": {
                                            "Name": "Instance",
                                            "Value": "Latency"
                                        },
                                        "Color": "#0072c6",
                                        "thresholds": {
                                            "isEnabled": false,
                                            "values": [
                                                {
                                                    "name": "Normal",
                                                    "threshold": "Default",
                                                    "color": "#009e49",
                                                    "isDefault": true
                                                },
                                                {
                                                    "name": "Warning",
                                                    "threshold": "60",
                                                    "color": "#fcd116",
                                                    "isDefault": false
                                                },
                                                {
                                                    "name": "Error",
                                                    "threshold": "90",
                                                    "color": "#ba141a",
                                                    "isDefault": false
                                                }
                                            ]
                                        },
                                        "NameDSVSeparator": "",
                                        "NavigationQuery": "SAPHana_CL | where CollectorType_s == \"State\" | where Category == \"Connectivity\" |summarize arg_max(TimeGenerated,* ) by HOST_s |project Host=HOST_s ,ConnectionStatus=Connection_s |union (     SAPHana_CL     | where CollectorType_s ==\"Inventory\" and Category== \"Services\"     | summarize arg_max(TimeGenerated, *) by HOST_s,SERVICE_NAME_s     |project Instance=Instance_s,Host=HOST_s, Status=ACTIVE_STATUS_s , Service=SERVICE_NAME_s ,Port=SQL_PORT_d )",
                                        "NavigationSelect": {
                                            "NavigationQuery": "SAPHana_CL | where CollectorType_s == \"State\" | where Category == \"Connectivity\" |summarize arg_max(TimeGenerated,* ) by HOST_s |project Host=HOST_s ,ConnectionStatus=Connection_s |union (     SAPHana_CL     | where CollectorType_s ==\"Inventory\" and Category== \"Services\"     | summarize arg_max(TimeGenerated, *) by HOST_s,SERVICE_NAME_s     |project Instance=Instance_s,Host=HOST_s, Status=ACTIVE_STATUS_s , Service=SERVICE_NAME_s ,Port=SQL_PORT_d )"
                                        }
                                    }
                                }
                            },
                            {
                                "Id": "SingleQueryDonutBuilderBladeV1",
                                "Type": "Blade",
                                "Version": 0,
                                "Configuration": {
                                    "General": {
                                        "title": "Alerts",
                                        "newGroup": false,
                                        "icon": "",
                                        "useIcon": false
                                    },
                                    "Header": {
                                        "Title": "Open Alerts",
                                        "Subtitle": ""
                                    },
                                    "Donut": {
                                        "Query": "let lastdatapoint = SAPHana_CL | where CollectorType_s ==\"Inventory\" | where Category == \"Alerts\" |summarize arg_max(TimeGenerated, *) by ALERT_HOST_s ,Database_s;  SAPHana_CL  | where CollectorType_s ==\"Inventory\"  | where Category == \"Alerts\"  |join kind= inner (     lastdatapoint  ) on $left.ALERT_HOST_s==$right.ALERT_HOST_s and   $left.Database_s==$right.Database_s and $left.TimeGenerated==$right.TimeGenerated | project DB=Database_s,Alert=strcat(ALERT_NAME_s,\" ; \",ALERT_DETAILS_s),ALERT_HOST_s,ALERT_RATING_d |extend Priority=case(ALERT_RATING_d==1,\"Information\" ,ALERT_RATING_d==3,\"Medium\",ALERT_RATING_d==4,\"High\",ALERT_RATING_d==5,\"Error\",\"NotDefined\")  |summarize AlertCount=count() by Priority",
                                        "CenterLegend": {
                                            "Text": "Total",
                                            "Operation": "Sum",
                                            "ArcsToSelect": []
                                        },
                                        "Options": {
                                            "colors": [
                                                "#eb3c00",
                                                "#ff8c00",
                                                "#fff100"
                                            ],
                                            "valueColorMapping": [
                                                {
                                                    "value": "High",
                                                    "color": "#e81123"
                                                },
                                                {
                                                    "value": "Medium",
                                                    "color": "#ff8c00"
                                                },
                                                {
                                                    "value": "Information",
                                                    "color": "#00bcf2"
                                                }
                                            ]
                                        },
                                        "NavigationSelect": {}
                                    },
                                    "List": {
                                        "Query": "let lastdatapoint = SAPHana_CL | where CollectorType_s ==\"Inventory\" | where Category == \"Alerts\" |summarize arg_max(TimeGenerated, *) by ALERT_HOST_s ,Database_s;  SAPHana_CL  | where CollectorType_s ==\"Inventory\"  | where Category == \"Alerts\"  |join kind= inner (     lastdatapoint  ) on $left.ALERT_HOST_s==$right.ALERT_HOST_s and   $left.Database_s==$right.Database_s and $left.TimeGenerated==$right.TimeGenerated | project Alert=strcat(Database_s,\"|\",ALERT_NAME_s,\" ; \",ALERT_DETAILS_s),ALERT_RATING_d | sort by ALERT_RATING_d desc nulls last ",
                                        "HideGraph": true,
                                        "enableSparklines": false,
                                        "operation": "Summary",
                                        "ColumnsTitle": {
                                            "Name": "DB-Alert",
                                            "Value": "Priority Numeric"
                                        },
                                        "Color": "#0072c6",
                                        "thresholds": {
                                            "isEnabled": true,
                                            "values": [
                                                {
                                                    "name": "Normal",
                                                    "threshold": "Default",
                                                    "color": "#00bcf2",
                                                    "isDefault": true
                                                },
                                                {
                                                    "name": "Warning",
                                                    "threshold": "2",
                                                    "color": "#fcd116",
                                                    "isDefault": false
                                                },
                                                {
                                                    "name": "Error",
                                                    "threshold": "3",
                                                    "color": "#ba141a",
                                                    "isDefault": false
                                                }
                                            ]
                                        },
                                        "NameDSVSeparator": "",
                                        "NavigationQuery": "SAPHana_CL | where CollectorType_s ==\"Inventory\" | where Category == \"Alerts\" |summarize arg_max(TimeGenerated, *) by HOST_s ,Database_s,ALERT_ID_d | project DB=Database_s,Alert=strcat(ALERT_NAME_s,\" ; \",ALERT_DETAILS_s),Rating=ALERT_RATING_d | project DB, Alert, Rating",
                                        "NavigationSelect": {
                                            "NavigationQuery": "SAPHana_CL | where CollectorType_s ==\"Inventory\" | where Category == \"Alerts\" |summarize arg_max(TimeGenerated, *) by HOST_s ,Database_s,ALERT_ID_d | project DB=Database_s,Alert=strcat(ALERT_NAME_s,\" ; \",ALERT_DETAILS_s),Rating=ALERT_RATING_d | project DB, Alert, Rating"
                                        }
                                    }
                                }
                            },
                            {
                                "Id": "LineChartBuilderBlade",
                                "Type": "Blade",
                                "Version": 0,
                                "Configuration": {
                                    "General": {
                                        "title": "Host and Service CPU Utilization",
                                        "newGroup": false,
                                        "icon": "",
                                        "useIcon": false
                                    },
                                    "Header": {
                                        "Title": "Host Utilization",
                                        "Subtitle": ""
                                    },
                                    "LineChart": {
                                        "Query": "SAPHana_CL | where CollectorType_s has \"Performance\" | where PerfObject_s ==\"Host\" and PerfCounter_s ==\"CPU_PCT\" | summarize CPU=avg(PerfValue_d) by Host=HOST_s, bin (TimeGenerated, 15m)",
                                        "yAxis": {
                                            "isLogarithmic": false,
                                            "units": {
                                                "baseUnitType": "",
                                                "baseUnit": "",
                                                "displayUnit": ""
                                            },
                                            "customLabel": ""
                                        },
                                        "NavigationSelect": {}
                                    },
                                    "List": {
                                        "Query": "SAPHana_CL | where CollectorType_s has \"Performance\" | where PerfObject_s ==\"Service\" and PerfCounter_s ==\"PROCESS_CPU\" and notempty(PerfInstance_s) and PerfInstance_s !='daemon' | summarize CPU=avg(PerfValue_d) by Path=strcat(HOST_s,\":\",PerfInstance_s), bin (TimeGenerated, 15m)",
                                        "HideGraph": false,
                                        "enableSparklines": true,
                                        "operation": "Average",
                                        "ColumnsTitle": {
                                            "Name": "Type",
                                            "Value": "ProcessCPU"
                                        },
                                        "Color": "#0072c6",
                                        "thresholds": {
                                            "isEnabled": false,
                                            "values": [
                                                {
                                                    "name": "Normal",
                                                    "threshold": "Default",
                                                    "color": "#009e49",
                                                    "isDefault": true
                                                },
                                                {
                                                    "name": "Warning",
                                                    "threshold": "60",
                                                    "color": "#fcd116",
                                                    "isDefault": false
                                                },
                                                {
                                                    "name": "Error",
                                                    "threshold": "90",
                                                    "color": "#ba141a",
                                                    "isDefault": false
                                                }
                                            ]
                                        },
                                        "NameDSVSeparator": "",
                                        "NavigationQuery": "SAPHana_CL | where CollectorType_s has \"Performance\" | where PerfObject_s ==\"Service\" and PerfCounter_s ==\"PROCESS_CPU\" and notempty(PerfInstance_s) and PerfInstance_s !='daemon' | summarize CPU=avg(PerfValue_d) by Path=strcat(HOST_s,\":\",PerfInstance_s), bin (TimeGenerated, 15m)|where {selected item} ",
                                        "NavigationSelect": {
                                            "NavigationQuery": "SAPHana_CL | where CollectorType_s has \"Performance\" | where PerfObject_s ==\"Service\" and PerfCounter_s ==\"PROCESS_CPU\" and notempty(PerfInstance_s) and PerfInstance_s !='daemon' | summarize CPU=avg(PerfValue_d) by Path=strcat(HOST_s,\":\",PerfInstance_s), bin (TimeGenerated, 15m)|where {selected item} "
                                        }
                                    }
                                }
                            },
                            {
                                "Id": "LineChartCalloutBuilderBlade",
                                "Type": "Blade",
                                "Version": 0,
                                "Configuration": {
                                    "General": {
                                        "title": "Host Memory Usage",
                                        "newGroup": false,
                                        "icon": "",
                                        "useIcon": false
                                    },
                                    "Header": {
                                        "Title": "Data types over time",
                                        "Subtitle": ""
                                    },
                                    "LineChart": {
                                        "Query": "SAPHana_CL | where CollectorType_s == \"Performance\" | where PerfObject_s ==\"Host\" and PerfCounter_s == \"FREE_PHYSICAL_MEMORY\" |summarize FREE=avg(PerfValue_d) by HOST_s , bin(TimeGenerated, 15m) |project Host=HOST_s,FREE,TimeGenerated |join kind= inner (     SAPHana_CL | where CollectorType_s == \"Performance\" | where PerfObject_s ==\"Host\" and PerfCounter_s == \"USED_PHYSICAL_MEMORY\" |summarize USED=avg(PerfValue_d) by HOST_s , bin(TimeGenerated, 15m) |project Host=HOST_s,USED,TimeGenerated ) on Host, TimeGenerated   |project Host, ['Memory %Used']=round((USED /(FREE+USED))*100,0) ,TimeGenerated",
                                        "Callout": {
                                            "Title": "Avg per hour",
                                            "Series": "",
                                            "Operation": "Average"
                                        },
                                        "yAxis": {
                                            "isLogarithmic": false,
                                            "units": {
                                                "baseUnitType": "",
                                                "baseUnit": "",
                                                "displayUnit": ""
                                            },
                                            "customLabel": ""
                                        },
                                        "NavigationSelect": {}
                                    },
                                    "List": {
                                        "Query": "SAPHana_CL | where CollectorType_s == \"Performance\" |where PerfValue_d >0 | where PerfObject_s ==\"Memory\" and PerfCounter_s==\"DatabaseResidentGB\" |summarize arg_max(TimeGenerated, *) by HOST_s ,Database_s,PerfObject_s,PerfCounter_s | project ['DB&Host']=strcat(Database_s,\" | \",HOST_s) ,Counter=\"DBResidentGB\",Value=round(PerfValue_d,1) |union( SAPHana_CL | where CollectorType_s == \"Performance\" |where PerfValue_d >0 | where PerfObject_s ==\"Host\" and PerfCounter_s in (\"USEDMEMORYGB\",\"TOTALRESIDENTGB\",\"ALLOCATIONLIMITGB\") |summarize arg_max(TimeGenerated, *) by HOST_s ,PerfObject_s,PerfCounter_s | project ['DB&Host']=HOST_s ,Counter=PerfCounter_s ,Value=round(PerfValue_d,1))",
                                        "HideGraph": false,
                                        "enableSparklines": false,
                                        "operation": "Summary",
                                        "ColumnsTitle": {
                                            "Name": "DB | HOST",
                                            "Value": "USEDGB"
                                        },
                                        "Color": "#0072c6",
                                        "thresholds": {
                                            "isEnabled": false,
                                            "values": [
                                                {
                                                    "name": "Normal",
                                                    "threshold": "Default",
                                                    "color": "#009e49",
                                                    "isDefault": true
                                                },
                                                {
                                                    "name": "Warning",
                                                    "threshold": "60",
                                                    "color": "#fcd116",
                                                    "isDefault": false
                                                },
                                                {
                                                    "name": "Error",
                                                    "threshold": "90",
                                                    "color": "#ba141a",
                                                    "isDefault": false
                                                }
                                            ]
                                        },
                                        "NameDSVSeparator": "",
                                        "NavigationQuery": "search {selected item} | sort by TimeGenerated desc",
                                        "NavigationSelect": {
                                            "NavigationQuery": "search {selected item} | sort by TimeGenerated desc"
                                        }
                                    }
                                }
                            },
                            {
                                "Id": "LineChartBuilderBlade",
                                "Type": "Blade",
                                "Version": 0,
                                "Configuration": {
                                    "General": {
                                        "title": "Host Memory Usage",
                                        "newGroup": false,
                                        "icon": "",
                                        "useIcon": false
                                    },
                                    "Header": {
                                        "Title": "Used vs Total Resident Memory",
                                        "Subtitle": ""
                                    },
                                    "LineChart": {
                                        "Query": " SAPHana_CL     | where CollectorType_s == \"Performance\"     | where PerfObject_s ==\"ServiceMemory\" and PerfCounter_s == \"TOTAL_MEMORY_USED_SIZE\"     |summarize USEDGB=max(PerfValue_d) by  HOST_s ,PerfInstance_d , bin(TimeGenerated, 15m)     |join kind= inner (          SAPHana_CL     | where CollectorType_s == \"Inventory\" and Category ==\"Services\"      |summarize arg_max(TimeGenerated, *) by  HOST_s ,PORT_d      |project SERVICE_NAME_s , PORT_d      ) on $left.PerfInstance_d==$right.PORT_d     |project Host=HOST_s, Service= SERVICE_NAME_s , AggregatedValue=USEDGB, TimeGenerated ",
                                        "yAxis": {
                                            "isLogarithmic": false,
                                            "units": {
                                                "baseUnitType": "",
                                                "baseUnit": "",
                                                "displayUnit": ""
                                            },
                                            "customLabel": ""
                                        },
                                        "NavigationSelect": {}
                                    },
                                    "List": {
                                        "Query": " SAPHana_CL     | where CollectorType_s == \"Performance\"     | where PerfObject_s ==\"ServiceMemory\" and PerfCounter_s == \"TOTAL_MEMORY_USED_SIZE\"     |summarize arg_max(TimeGenerated, *) by  HOST_s ,PerfInstance_d     |join kind= inner (          SAPHana_CL     | where CollectorType_s == \"Inventory\" and Category ==\"Services\"      |summarize arg_max(TimeGenerated, *) by  HOST_s ,PORT_d      |project SERVICE_NAME_s , PORT_d      ) on $left.PerfInstance_d==$right.PORT_d     |project Host=HOST_s, Service= SERVICE_NAME_s1 , USEDGB=round(PerfValue_d,2)",
                                        "HideGraph": false,
                                        "enableSparklines": false,
                                        "operation": "Summary",
                                        "ColumnsTitle": {
                                            "Name": "Database|Host",
                                            "Value": "GB"
                                        },
                                        "Color": "#0072c6",
                                        "thresholds": {
                                            "isEnabled": false,
                                            "values": [
                                                {
                                                    "name": "Normal",
                                                    "threshold": "Default",
                                                    "color": "#009e49",
                                                    "isDefault": true
                                                },
                                                {
                                                    "name": "Warning",
                                                    "threshold": "60",
                                                    "color": "#fcd116",
                                                    "isDefault": false
                                                },
                                                {
                                                    "name": "Error",
                                                    "threshold": "90",
                                                    "color": "#ba141a",
                                                    "isDefault": false
                                                }
                                            ]
                                        },
                                        "NameDSVSeparator": "",
                                        "NavigationQuery": "SAPHana_CL | where CollectorType_s == \"Performance\" | where PerfObject_s ==\"Memory\" and PerfCounter_s in(\"DatabaseResidentGB\",\"PeakUsedMemoryGB\",\"UsedMemoryGB\") |summarize avg(PerfValue_d) by HOST_s ,PerfObject_s,PerfCounter_s, bin(TimeGenerated, 15m) |where {selected item}",
                                        "NavigationSelect": {
                                            "NavigationQuery": "SAPHana_CL | where CollectorType_s == \"Performance\" | where PerfObject_s ==\"Memory\" and PerfCounter_s in(\"DatabaseResidentGB\",\"PeakUsedMemoryGB\",\"UsedMemoryGB\") |summarize avg(PerfValue_d) by HOST_s ,PerfObject_s,PerfCounter_s, bin(TimeGenerated, 15m) |where {selected item}"
                                        }
                                    }
                                }
                            },
                            {
                                "Id": "SingleQueryDonutBuilderBladeV1",
                                "Type": "Blade",
                                "Version": 0,
                                "Configuration": {
                                    "General": {
                                        "title": "Memory Usage by Component",
                                        "newGroup": false,
                                        "icon": "",
                                        "useIcon": false
                                    },
                                    "Header": {
                                        "Title": "",
                                        "Subtitle": ""
                                    },
                                    "Donut": {
                                        "Query": "SAPHana_CL |where CollectorType_s ==\"Performance\" |where PerfObject_s == \"Memory\" and PerfCounter_s ==\"Component\" |summarize arg_max(TimeGenerated, *) by HOST_s,PerfInstance_s |project strcat(HOST_s,':',PerfInstance_s),MEMUsageGB=round(PerfValue_d/1024,2)|sort by MEMUsageGB desc",
                                        "CenterLegend": {
                                            "Text": "Total",
                                            "Operation": "Sum",
                                            "ArcsToSelect": []
                                        },
                                        "Options": {
                                            "colors": [
                                                "#00188f",
                                                "#0072c6",
                                                "#00bcf2"
                                            ],
                                            "valueColorMapping": []
                                        },
                                        "NavigationSelect": {}
                                    },
                                    "List": {
                                        "Query": "SAPHana_CL |where CollectorType_s ==\"Performance\" |where PerfObject_s == \"Memory\" and PerfCounter_s ==\"Component\" |summarize arg_max(TimeGenerated, *) by HOST_s,PerfInstance_s |project Host=HOST_s,Component=PerfInstance_s,MEMUsageGB=round(PerfValue_d/1024,2) |sort by MEMUsageGB desc",
                                        "HideGraph": false,
                                        "enableSparklines": false,
                                        "operation": "Summary",
                                        "ColumnsTitle": {
                                            "Name": "Host",
                                            "Value": "UsedGB"
                                        },
                                        "Color": "#0072c6",
                                        "thresholds": {
                                            "isEnabled": false,
                                            "values": [
                                                {
                                                    "name": "Normal",
                                                    "threshold": "Default",
                                                    "color": "#009e49",
                                                    "isDefault": true
                                                },
                                                {
                                                    "name": "Warning",
                                                    "threshold": "60",
                                                    "color": "#fcd116",
                                                    "isDefault": false
                                                },
                                                {
                                                    "name": "Error",
                                                    "threshold": "90",
                                                    "color": "#ba141a",
                                                    "isDefault": false
                                                }
                                            ]
                                        },
                                        "NameDSVSeparator": "",
                                        "NavigationQuery": "SAPHana_CL |where CollectorType_s ==\"Performance\" |where PerfObject_s == \"Memory\" and PerfCounter_s ==\"Component\" |summarize MEMUsageGB=round(avg(PerfValue_d/1024),2)by Host=HOST_s,Component=PerfInstance_s|where  {selected item}",
                                        "NavigationSelect": {
                                            "NavigationQuery": "SAPHana_CL |where CollectorType_s ==\"Performance\" |where PerfObject_s == \"Memory\" and PerfCounter_s ==\"Component\" |summarize MEMUsageGB=round(avg(PerfValue_d/1024),2)by Host=HOST_s,Component=PerfInstance_s|where  {selected item}"
                                        }
                                    }
                                }
                            },
                            {
                                "Id": "SingleQueryDonutBuilderBladeV1",
                                "Type": "Blade",
                                "Version": 0,
                                "Configuration": {
                                    "General": {
                                        "title": "DATABASES",
                                        "newGroup": false,
                                        "icon": "",
                                        "useIcon": false
                                    },
                                    "Header": {
                                        "Title": "DB Size GB",
                                        "Subtitle": "CLICK TO NAVIGATE DB VIEW"
                                    },
                                    "Donut": {
                                        "Query": "SAPHana_CL |where  \tCollectorType_s==\"Inventory\" and \tCategory==\"Backup\" |summarize arg_max(TimeGenerated, *) by Database_s,SERVICE_NAME_s, Instance_s , ENTRY_TYPE_NAME_s | where SERVICE_NAME_s == \"indexserver\"  | where ENTRY_TYPE_NAME_s == \"complete data backup\"  |project DB=Database_s,\tSizeGB=round(ESTIMATED_SIZE_d/1024,0)",
                                        "CenterLegend": {
                                            "Text": "Total",
                                            "Operation": "Sum",
                                            "ArcsToSelect": []
                                        },
                                        "Options": {
                                            "colors": [
                                                "#55d455",
                                                "#0072c6",
                                                "#00bcf2"
                                            ],
                                            "valueColorMapping": []
                                        },
                                        "NavigationSelect": {}
                                    },
                                    "List": {
                                        "Query": "SAPHana_CL | where CollectorType_s==\"Inventory\" and Category==\"Tables\" and Subcategory_s==\"Largest\" |summarize arg_max(TimeGenerated, *) by HOST_s,TableName_s ,PART_ID_d |summarize TotalCount=sum(RECORD_COUNT_d) by Database_s,TableName_s  |top 10 by TotalCount desc nulls last |project Table=strcat(Database_s,\" | \",TableName_s)  , TotalCount",
                                        "HideGraph": false,
                                        "enableSparklines": false,
                                        "ColumnsTitle": {
                                            "Name": "DB | Table",
                                            "Value": "RecordCount"
                                        },
                                        "Color": "#0072c6",
                                        "thresholds": {
                                            "isEnabled": false,
                                            "values": [
                                                {
                                                    "name": "Normal",
                                                    "threshold": "Default",
                                                    "color": "#009e49",
                                                    "isDefault": true
                                                },
                                                {
                                                    "name": "Warning",
                                                    "threshold": "60",
                                                    "color": "#fcd116",
                                                    "isDefault": false
                                                },
                                                {
                                                    "name": "Error",
                                                    "threshold": "90",
                                                    "color": "#ba141a",
                                                    "isDefault": false
                                                }
                                            ]
                                        },
                                        "NameDSVSeparator": "",
                                        "NavigationQuery": "search {selected item} | sort by TimeGenerated desc",
                                        "NavigationSelect": {
                                            "Id": "Azure%20SAP%20HANA%20Database%20SizeGB"
                                        },
                                        "Navigation": {
                                            "Host": "OMSPortal",
                                            "Link": {
                                                "Type": "Builder",
                                                "Id": "Azure%20SAP%20HANA%20Database%20SizeGB"
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "Id": "SingleQueryDonutBuilderBladeV1",
                                "Type": "Blade",
                                "Version": 0,
                                "Configuration": {
                                    "General": {
                                        "title": "Inventory",
                                        "newGroup": false,
                                        "icon": "",
                                        "useIcon": false
                                    },
                                    "Header": {
                                        "Title": "Disks",
                                        "Subtitle": "USed GB"
                                    },
                                    "Donut": {
                                        "Query": "SAPHana_CL | where CollectorType_s ==\"Inventory\" and Category== \"Disks\" | summarize arg_max(TimeGenerated, *) by PATH_s,SUBPATH_s,DEVICE_ID_d |project Host=strcat(HOST_s,\" : \" ,USAGE_TYPE_s), Path=PATH_s,SizeinGb=round(TOTAL_SIZE_d,0),UsedGB=round(USED_SIZE_d,0) | project strcat(Host,\" : \", Path), UsedGB",
                                        "CenterLegend": {
                                            "Text": "Total",
                                            "Operation": "Sum",
                                            "ArcsToSelect": []
                                        },
                                        "Options": {
                                            "colors": [
                                                "#eb3c00",
                                                "#ffb900",
                                                "#00bcf2"
                                            ],
                                            "valueColorMapping": []
                                        },
                                        "NavigationSelect": {}
                                    },
                                    "List": {
                                        "Query": "SAPHana_CL | where CollectorType_s ==\"Inventory\" and Category== \"Disks\" | summarize arg_max(TimeGenerated, *) by PATH_s,SUBPATH_s,DEVICE_ID_d |project Host=strcat(HOST_s,\" : \" ,USAGE_TYPE_s), Path=PATH_s,SizeinGb=round(TOTAL_SIZE_d,0),UsedGB=round(USED_SIZE_d,0) | project Host, Path, SizevsUsed=strcat(SizeinGb,\"/\", UsedGB),UsedPCT=round(UsedGB*100/SizeinGb,0)",
                                        "HideGraph": true,
                                        "enableSparklines": false,
                                        "operation": "Summary",
                                        "ColumnsTitle": {
                                            "Name": "Host",
                                            "Value": "%Used"
                                        },
                                        "Color": "#0072c6",
                                        "thresholds": {
                                            "isEnabled": true,
                                            "values": [
                                                {
                                                    "name": "Normal",
                                                    "threshold": "Default",
                                                    "color": "#009e49",
                                                    "isDefault": true
                                                },
                                                {
                                                    "name": "Warning",
                                                    "threshold": "80",
                                                    "color": "#fcd116",
                                                    "isDefault": false
                                                },
                                                {
                                                    "name": "Error",
                                                    "threshold": "90",
                                                    "color": "#ba141a",
                                                    "isDefault": false
                                                }
                                            ]
                                        },
                                        "NameDSVSeparator": "",
                                        "NavigationQuery": "SAPHana_CL | where CollectorType_s ==\"Inventory\" and Category== \"Disks\" | summarize arg_max(TimeGenerated, *) by PATH_s,SUBPATH_s,DEVICE_ID_d |project Host=strcat(HOST_s,\" : \" ,USAGE_TYPE_s), Path=PATH_s,SizeinGb=round(TOTAL_SIZE_d,0),UsedGB=round(USED_SIZE_d,0) | project Host, Path, SizeinGb, UsedGB ,UsedPCT=round(UsedGB*100/SizeinGb,0)",
                                        "NavigationSelect": {
                                            "NavigationQuery": "SAPHana_CL | where CollectorType_s ==\"Inventory\" and Category== \"Disks\" | summarize arg_max(TimeGenerated, *) by PATH_s,SUBPATH_s,DEVICE_ID_d |project Host=strcat(HOST_s,\" : \" ,USAGE_TYPE_s), Path=PATH_s,SizeinGb=round(TOTAL_SIZE_d,0),UsedGB=round(USED_SIZE_d,0) | project Host, Path, SizeinGb, UsedGB ,UsedPCT=round(UsedGB*100/SizeinGb,0)"
                                        }
                                    }
                                }
                            },
                            {
                                "Id": "SingleQueryDonutBuilderBladeV1",
                                "Type": "Blade",
                                "Version": 0,
                                "Configuration": {
                                    "General": {
                                        "title": "Inventory",
                                        "newGroup": false,
                                        "icon": "",
                                        "useIcon": false
                                    },
                                    "Header": {
                                        "Title": "Volumes",
                                        "Subtitle": ""
                                    },
                                    "Donut": {
                                        "Query": "SAPHana_CL | where CollectorType_s ==\"Inventory\" and Category == \"Volumes\"  |summarize arg_max(TimeGenerated, *) by HOST_s,FILE_NAME_s |project Volume=strcat(HOST_s,\"/ Volume:\",VOLUME_ID_d),SizeinGB=round(SIZE_d/1024/1024/1024,1)",
                                        "CenterLegend": {
                                            "Text": "Total",
                                            "Operation": "Sum",
                                            "ArcsToSelect": []
                                        },
                                        "Options": {
                                            "colors": [
                                                "#442359",
                                                "#00bcf2",
                                                "#009e49"
                                            ],
                                            "valueColorMapping": []
                                        },
                                        "NavigationSelect": {}
                                    },
                                    "List": {
                                        "Query": "SAPHana_CL | where CollectorType_s ==\"Inventory\" and Category == \"Volumes\"  |summarize arg_max(TimeGenerated, *) by HOST_s,FILE_NAME_s |project Volume=strcat(HOST_s,\"/ Volume:\",VOLUME_ID_d),SizeinGB=round(SIZE_d/1024/1024/1024,1)",
                                        "HideGraph": false,
                                        "enableSparklines": false,
                                        "operation": "Summary",
                                        "ColumnsTitle": {
                                            "Name": "Volume",
                                            "Value": "SizeinGB"
                                        },
                                        "Color": "#0072c6",
                                        "thresholds": {
                                            "isEnabled": false,
                                            "values": [
                                                {
                                                    "name": "Normal",
                                                    "threshold": "Default",
                                                    "color": "#009e49",
                                                    "isDefault": true
                                                },
                                                {
                                                    "name": "Warning",
                                                    "threshold": "60",
                                                    "color": "#fcd116",
                                                    "isDefault": false
                                                },
                                                {
                                                    "name": "Error",
                                                    "threshold": "90",
                                                    "color": "#ba141a",
                                                    "isDefault": false
                                                }
                                            ]
                                        },
                                        "NameDSVSeparator": "",
                                        "NavigationQuery": "search {selected item} | sort by TimeGenerated desc",
                                        "NavigationSelect": {
                                            "NavigationQuery": "search {selected item} | sort by TimeGenerated desc"
                                        }
                                    }
                                }
                            },
                            {
                                "Id": "LineChartCalloutStackedBuilderBlade",
                                "Type": "Blade",
                                "Version": 0,
                                "Configuration": {
                                    "General": {
                                        "title": "Performance - Volumes",
                                        "newGroup": false
                                    },
                                    "charts": [
                                        {
                                            "Header": {
                                                "Title": "Read Throughput MB",
                                                "Subtitle": ""
                                            },
                                            "LineChart": {
                                                "Query": "SAPHana_CL | where CollectorType_s == \"Performance\" | where  PerfObject_s  == \"Volumes\"   and PerfCounter_s ==\"Read_MB_Sec\" |summarize Throughput=avg(PerfValue_d) by Host=strcat(\"Read:\",Database_s,\":\",SERVICE_NAME_s,\":\",PerfInstance_s),bin(TimeGenerated, 15m)",
                                                "yAxis": {
                                                    "isLogarithmic": false,
                                                    "units": {
                                                        "baseUnitType": "",
                                                        "baseUnit": "",
                                                        "displayUnit": ""
                                                    },
                                                    "customLabel": ""
                                                },
                                                "NavigationSelect": {}
                                            }
                                        },
                                        {
                                            "Header": {
                                                "Title": "Write Throughput MB",
                                                "Subtitle": ""
                                            },
                                            "LineChart": {
                                                "Query": "SAPHana_CL | where CollectorType_s == \"Performance\" | where  PerfObject_s  == \"Volumes\"   and PerfCounter_s ==\"Write_MB_Sec\" |summarize Throughput=avg(PerfValue_d) by Host=strcat(\"Write:\",Database_s,\":\",SERVICE_NAME_s,\":\",PerfInstance_s),bin(TimeGenerated, 15m)",
                                                "yAxis": {
                                                    "isLogarithmic": false,
                                                    "units": {
                                                        "baseUnitType": "",
                                                        "baseUnit": "",
                                                        "displayUnit": ""
                                                    },
                                                    "customLabel": ""
                                                },
                                                "NavigationSelect": {}
                                            }
                                        },
                                        {
                                            "Header": {
                                                "Title": "TOTAL IO  Read / Write ",
                                                "Subtitle": "by DATA / LOG"
                                            },
                                            "LineChart": {
                                                "Query": "SAPHana_CL | where CollectorType_s == \"Performance\" | where  PerfObject_s  == \"Volumes\"   and PerfCounter_s in (\"WRITE_COUNT\",\"READ_COUNT\") |extend Path=strcat(PerfCounter_s,\"|\",TYPE_s, \"|\",Database_s,\"|\",HOST_s) |summarize AggregatedValue=max(PerfValue_d) by Path, bin(TimeGenerated, 15m)",
                                                "yAxis": {
                                                    "isLogarithmic": false,
                                                    "units": {
                                                        "baseUnitType": "",
                                                        "baseUnit": "",
                                                        "displayUnit": ""
                                                    },
                                                    "customLabel": ""
                                                },
                                                "NavigationSelect": {}
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "Id": "LineChartBuilderBlade",
                                "Type": "Blade",
                                "Version": 0,
                                "Configuration": {
                                    "General": {
                                        "title": "Performance -Volumes",
                                        "newGroup": false,
                                        "icon": "",
                                        "useIcon": false
                                    },
                                    "Header": {
                                        "Title": "Write Latency Millisecond",
                                        "Subtitle": ""
                                    },
                                    "LineChart": {
                                        "Query": "SAPHana_CL | where CollectorType_s == \"Performance\" | where  PerfObject_s  == \"Volumes\"   and PerfCounter_s ==(\"AVG_WRITE_TIME_MICROS\") |extend Path=strcat(PerfInstance_s,\"|\",Database_s,\"|\",HOST_s) |summarize AggeregatedValue=max(PerfValue_d/1000) by  bin(TimeGenerated, 15m),Path|render timechart",
                                        "yAxis": {
                                            "isLogarithmic": false,
                                            "units": {
                                                "baseUnitType": "",
                                                "baseUnit": "",
                                                "displayUnit": ""
                                            },
                                            "customLabel": ""
                                        },
                                        "NavigationSelect": {}
                                    },
                                    "List": {
                                        "Query": "SAPHana_CL | where CollectorType_s == \"Performance\" | where  PerfObject_s  == \"Volumes\"   and PerfCounter_s ==(\"AVG_WRITE_TIME_MICROS\") |extend Path=strcat(PerfInstance_s,\"|\",Database_s,\"|\",HOST_s) |summarize arg_max(TimeGenerated, *) by Path |project Path ,Lantency_ms=round(PerfValue_d/1000,1) |sort by Lantency_ms  desc",
                                        "HideGraph": false,
                                        "enableSparklines": false,
                                        "operation": "Summary",
                                        "ColumnsTitle": {
                                            "Name": "Path",
                                            "Value": "Latency MilliSecond"
                                        },
                                        "Color": "#0072c6",
                                        "thresholds": {
                                            "isEnabled": false,
                                            "values": [
                                                {
                                                    "name": "Normal",
                                                    "threshold": "Default",
                                                    "color": "#009e49",
                                                    "isDefault": true
                                                },
                                                {
                                                    "name": "Warning",
                                                    "threshold": "60",
                                                    "color": "#fcd116",
                                                    "isDefault": false
                                                },
                                                {
                                                    "name": "Error",
                                                    "threshold": "90",
                                                    "color": "#ba141a",
                                                    "isDefault": false
                                                }
                                            ]
                                        },
                                        "NameDSVSeparator": "",
                                        "NavigationQuery": "SAPHana_CL | where CollectorType_s == \"Performance\" | where  PerfObject_s  == \"Volumes\"   and PerfCounter_s ==(\"AVG_WRITE_TIME_MICROS\") |extend Path=strcat(PerfInstance_s,\"|\",Database_s,\"|\",HOST_s) |summarize Lantency_ms=round(avg(PerfValue_d/1000),1) by Path, bin(TimeGenerated, 15m)|where  {selected item} ",
                                        "NavigationSelect": {
                                            "NavigationQuery": "SAPHana_CL | where CollectorType_s == \"Performance\" | where  PerfObject_s  == \"Volumes\"   and PerfCounter_s ==(\"AVG_WRITE_TIME_MICROS\") |extend Path=strcat(PerfInstance_s,\"|\",Database_s,\"|\",HOST_s) |summarize Lantency_ms=round(avg(PerfValue_d/1000),1) by Path, bin(TimeGenerated, 15m)|where  {selected item} "
                                        }
                                    }
                                }
                            },
                            {
                                "Id": "LineChartBuilderBlade",
                                "Type": "Blade",
                                "Version": 0,
                                "Configuration": {
                                    "General": {
                                        "title": "PErformance Volumes",
                                        "newGroup": false,
                                        "icon": "",
                                        "useIcon": false
                                    },
                                    "Header": {
                                        "Title": "Read Latency Millisecond",
                                        "Subtitle": ""
                                    },
                                    "LineChart": {
                                        "Query": "SAPHana_CL | where CollectorType_s == \"Performance\" | where  PerfObject_s  == \"Volumes\"   and PerfCounter_s ==(\"AVG_READ_TIME_MICROS\") |extend Path=strcat(PerfInstance_s,\"|\",Database_s,\"|\",HOST_s) |summarize AggeregatedValue=max(PerfValue_d/1000) by  bin(TimeGenerated, 15m),Path|render timechart",
                                        "yAxis": {
                                            "isLogarithmic": false,
                                            "units": {
                                                "baseUnitType": "",
                                                "baseUnit": "",
                                                "displayUnit": ""
                                            },
                                            "customLabel": ""
                                        },
                                        "NavigationSelect": {}
                                    },
                                    "List": {
                                        "Query": "SAPHana_CL | where CollectorType_s == \"Performance\" | where  PerfObject_s  == \"Volumes\"   and PerfCounter_s ==(\"AVG_READ_TIME_MICROS\") |extend Path=strcat(PerfInstance_s,\"|\",Database_s,\"|\",HOST_s) |summarize arg_max(TimeGenerated, *) by Path |project Path ,Lantency_ms=round(PerfValue_d/1000,1) |sort by Lantency_ms  desc",
                                        "HideGraph": false,
                                        "enableSparklines": false,
                                        "operation": "Summary",
                                        "ColumnsTitle": {
                                            "Name": "Path",
                                            "Value": "Latency MilliSecond"
                                        },
                                        "Color": "#0072c6",
                                        "thresholds": {
                                            "isEnabled": false,
                                            "values": [
                                                {
                                                    "name": "Normal",
                                                    "threshold": "Default",
                                                    "color": "#009e49",
                                                    "isDefault": true
                                                },
                                                {
                                                    "name": "Warning",
                                                    "threshold": "60",
                                                    "color": "#fcd116",
                                                    "isDefault": false
                                                },
                                                {
                                                    "name": "Error",
                                                    "threshold": "90",
                                                    "color": "#ba141a",
                                                    "isDefault": false
                                                }
                                            ]
                                        },
                                        "NameDSVSeparator": "",
                                        "NavigationQuery": "SAPHana_CL | where CollectorType_s == \"Performance\" | where  PerfObject_s  == \"Volumes\"   and PerfCounter_s ==(\"AVG_READ_TIME_MICROS\") |extend Path=strcat(PerfInstance_s,\"|\",Database_s,\"|\",HOST_s) |summarize Lantency_ms=round(avg(PerfValue_d/1000),1) by Path, bin(TimeGenerated, 15m)|where  {selected item}",
                                        "NavigationSelect": {
                                            "NavigationQuery": "SAPHana_CL | where CollectorType_s == \"Performance\" | where  PerfObject_s  == \"Volumes\"   and PerfCounter_s ==(\"AVG_READ_TIME_MICROS\") |extend Path=strcat(PerfInstance_s,\"|\",Database_s,\"|\",HOST_s) |summarize Lantency_ms=round(avg(PerfValue_d/1000),1) by Path, bin(TimeGenerated, 15m)|where  {selected item}"
                                        }
                                    }
                                }
                            },
                            {
                                "Id": "LineChartCalloutStackedBuilderBlade",
                                "Type": "Blade",
                                "Version": 0,
                                "Configuration": {
                                    "General": {
                                        "title": "PErformance Network In/Out and SavePoint ",
                                        "newGroup": false
                                    },
                                    "charts": [
                                        {
                                            "Header": {
                                                "Title": "Network In MB",
                                                "Subtitle": ""
                                            },
                                            "LineChart": {
                                                "Query": "SAPHana_CL | where CollectorType_s ==\"Performance\" | where PerfObject_s  == \"Host\" and PerfCounter_s ==\"NETWORK_IN_MB\" |summarize AvgMB=avg(PerfValue_d) by PATH=strcat(PerfCounter_s,':',HOST_s), bin(TimeGenerated, 15m)",
                                                "yAxis": {
                                                    "isLogarithmic": false,
                                                    "units": {
                                                        "baseUnitType": "",
                                                        "baseUnit": "",
                                                        "displayUnit": ""
                                                    },
                                                    "customLabel": ""
                                                },
                                                "NavigationSelect": {}
                                            }
                                        },
                                        {
                                            "Header": {
                                                "Title": "Network Out MB",
                                                "Subtitle": ""
                                            },
                                            "LineChart": {
                                                "Query": "SAPHana_CL | where CollectorType_s ==\"Performance\" | where PerfObject_s  == \"Host\" and PerfCounter_s ==\"NETWORK_OUT_MB\" |summarize AvgMB=avg(PerfValue_d) by PATH=strcat(PerfCounter_s,':',HOST_s), bin(TimeGenerated, 15m)",
                                                "yAxis": {
                                                    "isLogarithmic": false,
                                                    "units": {
                                                        "baseUnitType": "",
                                                        "baseUnit": "",
                                                        "displayUnit": ""
                                                    },
                                                    "customLabel": ""
                                                },
                                                "NavigationSelect": {}
                                            }
                                        },
                                        {
                                            "Header": {
                                                "Title": "SavePoint Duration sec",
                                                "Subtitle": ""
                                            },
                                            "LineChart": {
                                                "Query": "SAPHana_CL | where CollectorType_s == \"Performance\" | where  PerfObject_s  == \"SavePoint\"   and PerfCounter_s ==\"DurationSec\" |summarize Durationsec=avg(PerfValue_d) by Path=strcat(PerfCounter_s,\";\",Database_s,\": Volume:\",VOLUME_ID_d) ,bin(TimeGenerated,1h)",
                                                "yAxis": {
                                                    "isLogarithmic": false,
                                                    "units": {
                                                        "baseUnitType": "",
                                                        "baseUnit": "",
                                                        "displayUnit": ""
                                                    },
                                                    "customLabel": ""
                                                },
                                                "NavigationSelect": {}
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "Id": "LineChartBuilderBlade",
                                "Type": "Blade",
                                "Version": 0,
                                "Configuration": {
                                    "General": {
                                        "title": "Inventory",
                                        "newGroup": false,
                                        "icon": "",
                                        "useIcon": false
                                    },
                                    "Header": {
                                        "Title": "Licence Usage",
                                        "Subtitle": "Limit vs Used"
                                    },
                                    "LineChart": {
                                        "Query": "SAPHana_CL | where CollectorType_s ==\"Inventory\" | where Category == \"License\" |summarize Limit=max(PRODUCT_LIMIT_d), Usage=max(PRODUCT_USAGE_d) by SYSTEMID=SYSTEM_ID_s ,bin(TimeGenerated, 1h)",
                                        "yAxis": {
                                            "isLogarithmic": false,
                                            "units": {
                                                "baseUnitType": "",
                                                "baseUnit": "",
                                                "displayUnit": ""
                                            },
                                            "customLabel": ""
                                        },
                                        "NavigationSelect": {}
                                    },
                                    "List": {
                                        "Query": "SAPHana_CL | where CollectorType_s ==\"Inventory\" | where Category == \"License\" |summarize arg_max(TimeGenerated, *) by SYSTEM_ID_s,HOST_s |project SYSTEMID=SYSTEM_ID_s ,Valid=VALID_s,LimitandUsage=strcat(tostring(PRODUCT_LIMIT_d),'/',tostring(PRODUCT_USAGE_d)),UsagePCT=round(PRODUCT_USAGE_d*100/PRODUCT_LIMIT_d,0) | project SYSTEMID, Valid, LimitandUsage ,UsagePCT",
                                        "HideGraph": true,
                                        "enableSparklines": false,
                                        "operation": "Summary",
                                        "ColumnsTitle": {
                                            "Name": "Type",
                                            "Value": "%Used"
                                        },
                                        "Color": "#0072c6",
                                        "thresholds": {
                                            "isEnabled": true,
                                            "values": [
                                                {
                                                    "name": "Normal",
                                                    "threshold": "Default",
                                                    "color": "#009e49",
                                                    "isDefault": true
                                                },
                                                {
                                                    "name": "Warning",
                                                    "threshold": "80",
                                                    "color": "#fcd116",
                                                    "isDefault": false
                                                },
                                                {
                                                    "name": "Error",
                                                    "threshold": "90",
                                                    "color": "#ba141a",
                                                    "isDefault": false
                                                }
                                            ]
                                        },
                                        "NameDSVSeparator": "",
                                        "NavigationQuery": "search {selected item} | sort by TimeGenerated desc",
                                        "NavigationSelect": {
                                            "NavigationQuery": "search {selected item} | sort by TimeGenerated desc"
                                        }
                                    }
                                }
                            },
                            {
                                "Id": "SingleQueryDonutBuilderBladeV1",
                                "Type": "Blade",
                                "Version": 0,
                                "Configuration": {
                                    "General": {
                                        "title": "Inventory",
                                        "newGroup": false,
                                        "icon": "",
                                        "useIcon": false
                                    },
                                    "Header": {
                                        "Title": "Backup Size Estimations",
                                        "Subtitle": ""
                                    },
                                    "Donut": {
                                        "Query": "SAPHana_CL | where CollectorType_s ==\"Inventory\" and Category== \"Backup\" | summarize arg_max(TimeGenerated, *) by Database_s,SERVICE_NAME_s,ENTRY_TYPE_NAME_s |project DB=strcat(Instance_s,\" : \",Database_s,\" : \",SERVICE_NAME_s),SizeinGB= round(ESTIMATED_SIZE_d/1024,2)",
                                        "CenterLegend": {
                                            "Text": "Total_GB",
                                            "Operation": "Sum",
                                            "ArcsToSelect": []
                                        },
                                        "Options": {
                                            "colors": [
                                                "#00188f",
                                                "#0072c6",
                                                "#00bcf2"
                                            ],
                                            "valueColorMapping": []
                                        },
                                        "NavigationSelect": {}
                                    },
                                    "List": {
                                        "Query": "SAPHana_CL | where CollectorType_s ==\"Inventory\" and Category== \"Backup\" | summarize arg_max(TimeGenerated, *) by Database_s,SERVICE_NAME_s,ENTRY_TYPE_NAME_s |project DB=strcat(Instance_s,\" : \",Database_s,\" : \",SERVICE_NAME_s),BackupType=ENTRY_TYPE_NAME_s,SizeinGB= round(ESTIMATED_SIZE_d/1024,2)",
                                        "HideGraph": false,
                                        "enableSparklines": false,
                                        "operation": "Summary",
                                        "ColumnsTitle": {
                                            "Name": "DB",
                                            "Value": "SizeinGB"
                                        },
                                        "Color": "#0072c6",
                                        "thresholds": {
                                            "isEnabled": false,
                                            "values": [
                                                {
                                                    "name": "Normal",
                                                    "threshold": "Default",
                                                    "color": "#009e49",
                                                    "isDefault": true
                                                },
                                                {
                                                    "name": "Warning",
                                                    "threshold": "60",
                                                    "color": "#fcd116",
                                                    "isDefault": false
                                                },
                                                {
                                                    "name": "Error",
                                                    "threshold": "90",
                                                    "color": "#ba141a",
                                                    "isDefault": false
                                                }
                                            ]
                                        },
                                        "NameDSVSeparator": "",
                                        "NavigationQuery": "search {selected item} | sort by TimeGenerated desc",
                                        "NavigationSelect": {
                                            "NavigationQuery": "search {selected item} | sort by TimeGenerated desc"
                                        }
                                    }
                                }
                            },
                            {
                                "Id": "LineChartCalloutStackedBuilderBlade",
                                "Type": "Blade",
                                "Version": 0,
                                "Configuration": {
                                    "General": {
                                        "title": "SMART ANALYTICS  - TRENDS",
                                        "newGroup": false
                                    },
                                    "charts": [
                                        {
                                            "Header": {
                                                "Title": "HOST CPU Utilization Trend ",
                                                "Subtitle": "Based on Last 7 Days"
                                            },
                                            "LineChart": {
                                                "Query": "let trend7days=SAPHana_CL | where CollectorType_s has \"Performance\" | where PerfObject_s ==\"Host\" and PerfCounter_s ==\"CPU_PCT\" |where TimeGenerated >= ago(7d) | make-series avgCPU=avg(PerfValue_d) default=double(null)  on TimeGenerated in range(ago(7d),now(), 1h) by HOST_s | extend avgInterpolated = series_fill_linear(avgCPU) |extend outliers=series_outliers(avgInterpolated) | extend series_fit_line(avgInterpolated) |extend trend=series_fit_line_avgInterpolated_rsquare*series_fit_line_avgInterpolated_slope |mvexpand outliers to typeof(double), avgInterpolated to typeof(double), TimeGenerated to typeof(datetime),series_fit_line_avgInterpolated_line_fit  to typeof(double) limit  256; let trend30days=SAPHana_CL | where CollectorType_s has \"Performance\" | where PerfObject_s ==\"Host\" and PerfCounter_s ==\"CPU_PCT\" |where TimeGenerated >= ago(30d) | make-series avgCPU=avg(PerfValue_d) default=double(null)  on TimeGenerated in range(ago(30d),now(), 2h) by HOST_s | extend avgInterpolated = series_fill_linear(avgCPU) |extend outliers=series_outliers(avgInterpolated) | extend series_fit_line(avgInterpolated) |extend trend=series_fit_line_avgInterpolated_rsquare*series_fit_line_avgInterpolated_slope | mvexpand  TimeGenerated to typeof(datetime),series_fit_line_avgInterpolated_line_fit  to typeof(double) limit  360; trend7days |summarize AvgValue=avg(series_fit_line_avgInterpolated_line_fit) by Host=strcat(\"Trend7Day|\",HOST_s) , bin(TimeGenerated, 1h) |union (trend30days |summarize AvgValue=avg(series_fit_line_avgInterpolated_line_fit) by Host=strcat(\"Trend30Day|\",HOST_s) , bin(TimeGenerated, 1h)), (  trend7days |summarize AvgValue=avg(avgInterpolated) by Host=strcat(\"Actual|\",HOST_s) , bin(TimeGenerated, 1h)  ) |summarize AggregatedValue=avg(AvgValue) by Host, bin(TimeGenerated, 1h)",
                                                "yAxis": {
                                                    "isLogarithmic": false,
                                                    "units": {
                                                        "baseUnitType": "",
                                                        "baseUnit": "",
                                                        "displayUnit": ""
                                                    },
                                                    "customLabel": ""
                                                },
                                                "NavigationSelect": {}
                                            }
                                        },
                                        {
                                            "Header": {
                                                "Title": "Memory Utilization Trends ",
                                                "Subtitle": "Based on Last 7 Days"
                                            },
                                            "LineChart": {
                                                "Query": "let trending=SAPHana_CL | where CollectorType_s == \"Performance\"  | where  PerfCounter_s in(\"UsedMemoryGB\") |extend Path=strcat(HOST_s,':',PerfCounter_s) |where TimeGenerated >= ago(7d) | make-series avgValue=avg(PerfValue_d) default=double(null)  on TimeGenerated in range(ago(7d),now(), 1h) by Path | extend avgInterpolated = series_fill_linear(avgValue) |extend outliers=series_outliers(avgInterpolated) | extend series_fit_line(avgInterpolated) |extend trend=series_fit_line_avgInterpolated_rsquare*series_fit_line_avgInterpolated_slope | mvexpand outliers to typeof(double), avgInterpolated to typeof(double), TimeGenerated to typeof(datetime),series_fit_line_avgInterpolated_line_fit  to typeof(double) limit  256 ; trending |summarize AvgValue=avg(series_fit_line_avgInterpolated_line_fit) by Host=strcat(\"Trend|\",Path) , bin(TimeGenerated, 1h) |union (  trending |summarize AvgValue=avg(avgInterpolated) by Host=strcat(\"Actual|\",Path) , bin(TimeGenerated, 1h)  ) |summarize AggregatedValue=avg(AvgValue) by Host, bin(TimeGenerated, 1h)",
                                                "yAxis": {
                                                    "isLogarithmic": false,
                                                    "units": {
                                                        "baseUnitType": "",
                                                        "baseUnit": "",
                                                        "displayUnit": ""
                                                    },
                                                    "customLabel": ""
                                                },
                                                "NavigationSelect": {}
                                            }
                                        },
                                        {
                                            "Header": {
                                                "Title": "Disk Latency ",
                                                "Subtitle": "Worst 3 Based on Last 7 Days"
                                            },
                                            "LineChart": {
                                                "Query": "let worst3=SAPHana_CL | where CollectorType_s == \"Performance\" | where  PerfObject_s  == \"Volumes\"   and PerfCounter_s ==(\"AVG_WRITE_TIME_MICROS\") |extend Path=strcat(PerfInstance_s,\"|\",Database_s,\"|\",HOST_s) |where TimeGenerated >= ago(7d) |summarize avg(PerfValue_d)  by Path |top 3 by avg_PerfValue_d desc nulls last|project Path;  let trending=SAPHana_CL | where CollectorType_s == \"Performance\" | where  PerfObject_s  == \"Volumes\"   and PerfCounter_s ==(\"AVG_WRITE_TIME_MICROS\") |extend Path=strcat(PerfInstance_s,\"|\",Database_s,\"|\",HOST_s) |where Path in (worst3) |where TimeGenerated >= ago(7d) | make-series avgValue=avg(PerfValue_d/1000) default=double(null)  on TimeGenerated in range(ago(7d),now(), 1h) by Path | extend avgInterpolated = series_fill_linear(avgValue) |extend outliers=series_outliers(avgInterpolated) | extend series_fit_line(avgInterpolated) |extend trend=series_fit_line_avgInterpolated_rsquare*series_fit_line_avgInterpolated_slope | mvexpand outliers to typeof(double), avgInterpolated to typeof(double), TimeGenerated to typeof(datetime),series_fit_line_avgInterpolated_line_fit  to typeof(double) limit  256 ; trending |summarize AvgValue=avg(series_fit_line_avgInterpolated_line_fit) by Host=strcat(\"Trend|\",Path) , bin(TimeGenerated, 1h) |union (  trending |summarize AvgValue=avg(avgInterpolated) by Host=strcat(\"Actual|\",Path) , bin(TimeGenerated, 1h)  ) |summarize AggregatedValue=avg(AvgValue) by Host, bin(TimeGenerated, 1h)",
                                                "yAxis": {
                                                    "isLogarithmic": false,
                                                    "units": {
                                                        "baseUnitType": "",
                                                        "baseUnit": "",
                                                        "displayUnit": ""
                                                    },
                                                    "customLabel": ""
                                                },
                                                "NavigationSelect": {}
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "Id": "NotableQueriesBuilderBlade",
                                "Type": "Blade",
                                "Version": 0,
                                "Configuration": {
                                    "General": {
                                        "title": "List of queries",
                                        "newGroup": false,
                                        "preselectedFilters": "Type, Computer",
                                        "renderMode": "grid"
                                    },
                                    "queries": [
                                        {
                                            "query": "let query=\"e7492f87-6680-7a18-9614-b8467932922c|S4X-30|azesapsbxs4db1|S4X\";  SAPHana_CL  |where    CollectorType_s==\"Inventory\" and    Category==\"Statement\" | extend path=strcat(STATEMENT_HASH_g,\"|\",Instance_s, \"|\", HOST_s, \"|\", Database_s)  |where path==query |summarize arg_max(TimeGenerated, *) by path |project path,STATEMENT_STRING_s  //edit query to analyze",
                                            "displayName": "Get Query Details"
                                        },
                                        {
                                            "query": "let query=\"e7492f87-6680-7a18-9614-b8467932922c|S4X-30|azesapsbxs4db1|S4X\";  let trendthreshold=0.1;  let daystocheck=ago(2d);  let bininterval=15m; SAPHana_CL |where  \tCollectorType_s==\"Inventory\" and \tCategory==\"Statement\" |where STATEMENT_STRING_s  !startswith \"\" \"/* OMS */\" | extend path=strcat(STATEMENT_HASH_g,\"|\",Instance_s, \"|\", HOST_s, \"|\", Database_s) |where path==query |summarize avg(AVG_EXECUTION_TIME_d/1000) by path,bin(TimeGenerated, bininterval) |render timechart ",
                                            "displayName": "Query Execution Time History"
                                        },
                                        {
                                            "query": "let trendthreshold=0.2; let daystocheck=ago(2d); SAPHana_CL |where  \tCollectorType_s==\"Inventory\" and \tCategory==\"Statement\" |where STATEMENT_STRING_s  !startswith \"\" \"/* OMS */\" | extend path=strcat(STATEMENT_HASH_g,\"|\",Instance_s, \"|\", HOST_s, \"|\", Database_s) | make-series avg_duration=max(AVG_EXECUTION_TIME_d/1000) default=double(null)  on TimeGenerated in range(daystocheck,now(), 1h) by path | extend avgInterpolated = series_fill_linear(avg_duration) |extend outliers=series_outliers(avgInterpolated) | extend series_fit_line(avgInterpolated) |extend trend=series_fit_line_avgInterpolated_rsquare*series_fit_line_avgInterpolated_slope |where trend >= trendthreshold |top 10 by trend desc nulls last | mvexpand outliers to typeof(double), avgInterpolated to typeof(double), TimeGenerated to typeof(datetime),series_fit_line_avgInterpolated_line_fit  to typeof(double) limit  256 |render timechart",
                                            "displayName": "Get Top 10 Trending Queries"
                                        },
                                        {
                                            "query": "let trend7days=SAPHana_CL | where CollectorType_s has \"Performance\" | where PerfObject_s ==\"Host\" and PerfCounter_s ==\"CPU_PCT\" |where TimeGenerated >= ago(7d) | make-series avgCPU=avg(PerfValue_d) default=double(null)  on TimeGenerated in range(ago(7d),now(), 1h) by HOST_s | extend avgInterpolated = series_fill_linear(avgCPU) |extend outliers=series_outliers(avgInterpolated) | extend series_fit_line(avgInterpolated) |extend trend=series_fit_line_avgInterpolated_rsquare*series_fit_line_avgInterpolated_slope |mvexpand outliers to typeof(double), avgInterpolated to typeof(double), TimeGenerated to typeof(datetime),series_fit_line_avgInterpolated_line_fit  to typeof(double) limit  256; let trend30days=SAPHana_CL | where CollectorType_s has \"Performance\" | where PerfObject_s ==\"Host\" and PerfCounter_s ==\"CPU_PCT\" |where TimeGenerated >= ago(30d) | make-series avgCPU=avg(PerfValue_d) default=double(null)  on TimeGenerated in range(ago(30d),now(), 2h) by HOST_s | extend avgInterpolated = series_fill_linear(avgCPU) |extend outliers=series_outliers(avgInterpolated) | extend series_fit_line(avgInterpolated) |extend trend=series_fit_line_avgInterpolated_rsquare*series_fit_line_avgInterpolated_slope | mvexpand  TimeGenerated to typeof(datetime),series_fit_line_avgInterpolated_line_fit  to typeof(double) limit  360; trend7days |summarize AvgValue=avg(series_fit_line_avgInterpolated_line_fit) by Host=strcat(\"Trend7Day|\",HOST_s) , bin(TimeGenerated, 1h) |union (trend30days |summarize AvgValue=avg(series_fit_line_avgInterpolated_line_fit) by Host=strcat(\"Trend30Day|\",HOST_s) , bin(TimeGenerated, 1h)), (  trend7days |summarize AvgValue=avg(avgInterpolated) by Host=strcat(\"ActualCPU|\",HOST_s) , bin(TimeGenerated, 1h)  ) |summarize AvgCPU=avg(AvgValue) by Host, bin(TimeGenerated, 1h) |render timechart ",
                                            "displayName": "CPU Actual vs Trends 7Days / 30Days"
                                        },
                                        {
                                            "query": "let trending=SAPHana_CL | where CollectorType_s == \"Performance\" | where  PerfCounter_s in(\"UsedMemoryGB\") |extend Path=strcat(HOST_s,':',PerfCounter_s) |where TimeGenerated >= ago(7d) | make-series avgValue=avg(PerfValue_d) default=double(null)  on TimeGenerated in range(ago(7d),now(), 1h) by Path | extend avgInterpolated = series_fill_linear(avgValue) |extend outliers=series_outliers(avgInterpolated) | extend series_fit_line(avgInterpolated) |extend trend=series_fit_line_avgInterpolated_rsquare*series_fit_line_avgInterpolated_slope | mvexpand outliers to typeof(double), avgInterpolated to typeof(double), TimeGenerated to typeof(datetime),series_fit_line_avgInterpolated_line_fit  to typeof(double) limit  256 ; trending |summarize AvgValue=avg(series_fit_line_avgInterpolated_line_fit) by Host=strcat(\"Trend|\",Path) , bin(TimeGenerated, 1h) |union (  trending |summarize AvgValue=avg(avgInterpolated) by Host=strcat(\"Actual|\",Path) , bin(TimeGenerated, 1h)  ) |summarize UsedMemGB=avg(AvgValue) by Host, bin(TimeGenerated, 1h) |render timechart ",
                                            "displayName": "Used Memory Actual vs Trend 7 Days"
                                        },
                                        {
                                            "query": "let searchlastndays=ago(7d); let forecastndays=30; let bin_size=1d; let pasttrend=SAPHana_CL | where CollectorType_s has \"Performance\" | where PerfObject_s ==\"Host\" and PerfCounter_s ==\"CPU_PCT\" |where TimeGenerated >= searchlastndays | make-series avgCPU=avg(PerfValue_d) default=double(null)  on TimeGenerated in range(searchlastndays,now(), 1d) by HOST_s | extend avgInterpolated = series_fill_linear(avgCPU) |extend outliers=series_outliers(avgInterpolated) | extend series_fit_line(avgInterpolated) | extend rp=series_fit_line_avgInterpolated_line_fit[(arraylength(avgInterpolated)-1)] | extend days_to_zero = rp/-series_fit_line_avgInterpolated_slope/(1d/1d) |extend trend=series_fit_line_avgInterpolated_rsquare*series_fit_line_avgInterpolated_slope |mvexpand outliers to typeof(double), avgInterpolated to typeof(double), TimeGenerated to typeof(datetime),series_fit_line_avgInterpolated_line_fit  to typeof(double) limit  256; pasttrend |project Host=HOST_s,avgCPU=avgInterpolated,TimeGenerated |union ( range i from 0 to forecastndays  step 1 | project TimeGenerated =datetime_add('day',i,now()), y=toscalar(pasttrend|summarize arg_max(TimeGenerated,*) by HOST_s  |project series_fit_line_avgInterpolated_slope)*i ,  cpu=toscalar(pasttrend|summarize arg_max(TimeGenerated,*) by HOST_s|project avgInterpolated) ,Host=strcat(toscalar(pasttrend|summarize arg_max(TimeGenerated,*) by HOST_s|project HOST_s),'-Forecast') |extend avgCPU=cpu+y |project TimeGenerated,avgCPU,Host) |render timechart ",
                                            "displayName": "CPU Forecast for n days based on past n days"
                                        },
                                        {
                                            "query": "let prev7days=SAPHana_CL | where CollectorType_s has \"Performance\" | where PerfCounter_s ==\"UsedMemoryGB\" |where TimeGenerated >= ago(7d) | make-series avgCPU=avg(PerfValue_d) default=double(null)  on TimeGenerated in range(ago(7d),now(), 1d) by HOST_s | extend avgInterpolated = series_fill_linear(avgCPU) |extend outliers=series_outliers(avgInterpolated) | extend series_fit_line(avgInterpolated) | extend rp=series_fit_line_avgInterpolated_line_fit[(arraylength(avgInterpolated)-1)] | extend days_to_zero = rp/-series_fit_line_avgInterpolated_slope/(1d/1d) |extend trend=series_fit_line_avgInterpolated_rsquare*series_fit_line_avgInterpolated_slope |mvexpand outliers to typeof(double), avgInterpolated to typeof(double), TimeGenerated to typeof(datetime),series_fit_line_avgInterpolated_line_fit  to typeof(double) limit  256 |summarize arg_max(TimeGenerated,*) by HOST_s; let bin_size=1d; range i from 0 to 30d/bin_size step 5 |extend Day=strcat('day',tostring(toint(i))) | project t=i*1d, y=toscalar(prev7days |project series_fit_line_avgInterpolated_slope)*i , cpu=toscalar(prev7days |project avgInterpolated),Day |extend forecastMeM=cpu+y |project t,Day,forecastMeM =iff(forecastMeM<0,toreal(0),forecastMeM) |render barchart ",
                                            "displayName": "Memory Forecast based on last 7days"
                                        },
                                        {
                                            "query": "SAPHana_CL |where  \tCollectorType_s==\"Inventory\" and \tCategory==\"Statement\" |where STATEMENT_STRING_s  !startswith \"\" \"/* OMS */\" | extend path=strcat(STATEMENT_HASH_g,\"|\",Instance_s, \"|\", HOST_s, \"|\", Database_s) | make-series avg_duration=max(AVG_EXECUTION_TIME_d/1000) default=double(null)  on TimeGenerated in range(ago(7d),now(), 1h) by path | extend avgInterpolated = series_fill_linear(avg_duration) |extend outliers=series_outliers(avgInterpolated) | extend series_fit_line(avgInterpolated) |extend trend=series_fit_line_avgInterpolated_rsquare*series_fit_line_avgInterpolated_slope |top 10 by trend desc nulls last |project path |join kind= inner (     SAPHana_CL |where  \tCollectorType_s==\"Inventory\" and \tCategory==\"Statement\" |where STATEMENT_STRING_s  !startswith \"\" \"/* OMS */\" |where TimeGenerated > ago(7d) | extend path=strcat(STATEMENT_HASH_g,\"|\",Instance_s, \"|\", HOST_s, \"|\", Database_s) |project path,ACCESSED_TABLE_NAMES_s ) on path |extend Tables=split(ACCESSED_TABLE_NAMES_s,',') |mvexpand Tables to typeof(string) |summarize count() by Tables",
                                            "displayName": "Tables Accessed by Trending Queries"
                                        },
                                        {
                                            "query": "let tabletosearch=\"LIVECACHE\";  SAPHana_CL |where  \tCollectorType_s==\"Inventory\" and \tCategory==\"Statement\" |where STATEMENT_STRING_s  !startswith \"\" \"/* OMS */\" | extend path=strcat(STATEMENT_HASH_g,\"|\",Instance_s, \"|\", HOST_s, \"|\", Database_s) |extend Tables=split(ACCESSED_TABLE_NAMES_s,',') |mvexpand Tables to typeof(string) |where Tables contains tabletosearch |project path, ACCESSED_TABLE_NAMES_s  |distinct path",
                                            "displayName": "Find queries accessing specific table"
                                        }
                                    ]
                                }
                            }
                        ],
                        "Filters": [],
                        "OverviewTile": {
                            "Id": "LineChartCalloutBuilderTile",
                            "Type": "OverviewTile",
                            "Version": 2,
                            "Configuration": {
                                "LineChart": {
                                    "Query": "SAPHana_CL | where CollectorType_s has \"Performance\" | where PerfObject_s ==\"Host\" and PerfCounter_s ==\"CPU_PCT\" | summarize CPU=avg(PerfValue_d) by Host=HOST_s, bin (TimeGenerated, 15m)",
                                    "Callout": {
                                        "Title": "Average",
                                        "Series": "",
                                        "Operation": "Average"
                                    },
                                    "yAxis": {
                                        "isLogarithmic": false,
                                        "units": {
                                            "baseUnitType": "Percentage",
                                            "baseUnit": "ZeroToOne",
                                            "displayUnit": "ZeroToOne"
                                        },
                                        "customLabel": ""
                                    }
                                },
                                "Advanced": {
                                    "DataFlowVerification": {
                                        "Enabled": false,
                                        "Query": "SAPHana_CL  | limit 1 | project TimeGenerated",
                                        "Message": "Make sure collector runbook is running on Hybrid Runbook VM"
                                    }
                                }
                            }
                        }
                    }
                }
            ]
        }
    ]
}