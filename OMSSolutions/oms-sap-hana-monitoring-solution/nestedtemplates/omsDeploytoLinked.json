{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "logAnalyticsWorkspaceName": {
            "type": "string",
            "metadata": {
                "description": "Create new or use an existing Log Analytic Workspace"
            }
        },
        "logAnalyticsRegion": {
            "type": "string",
            "allowedValues": [
                "westeurope",
                "eastus",
                "southeastasia",
                "australiasoutheast",
                "wescentralus"
            ],
            "metadata": {
                "description": "Specify the Azure Region for your new or existing OMS workspace"
            }
        },
        "logAnalyticsSku": {
            "type": "string",
            "defaultValue": "free",
            "allowedValues": [
                "free",
                "standalone",
                "pernode"
            ],
            "metadata": {
                "description": "Specify the SKU for Log Analytics"
            }
        },
        "automationAccountName": {
            "type": "string",
            "metadata": {
                "description": "Use an existing Automation account or create a new"
            }
        },
        "automationRegion": {
            "type": "string",
            "allowedValues": [
                "westeurope",
                "southeastasia",
                "eastus2",
                "southcentralus",
                "japaneast",
                "southeastasia",
                "southcentralus",
                "northeurope",
                "canadacentral",
                "australiasoutheast",
                "centralindia",
                "japaneast"
            ],
            "metadata": {
                "description": "Specify the Azure Region for your OMS Automation Account"
            }
        },
        "workspaceType": {
            "type": "string",
            "allowedValues": [
                "Linked",
                "Unlinked"
            ],
            "metadata": {
                "description": "Specify the Azure Region for your OMS Automation Account"
            }
        },
        "linkedWorkspaceSKU": {
            "type": "array",
            "defaultValue": [
                "pernode",
                "OMS"
            ],
            "allowedValues": [
                [
                    "pernode",
                    "OMS"
                ],
                [
                    "free",
                    "free"
                ]
            ],
            "metadata": {
                "description": "Choose the SKU for linked workspace  , only valid  if workspaceType is Linked otherwise ignored."
            }
        },
        "dataCollectionFrequency": {
            "type": "int",
            "defaultValue": 15,
            "allowedValues": [
                15,
                30,
                60
            ],
            "metadata": {
                "description": "Specify the Azure SAP HANA Monitor retrieval frequency"
            }
        },
        "sapHanaMonitorUser": {
            "type": "string",
            "metadata": {
                "description": "Specify the username  for Hana Monitoring Role"
            }
        },
        "sapHanaMonitorPassword": {
            "type": "securestring",
             "metadata": {
                "description": "Specify the password  for Hana Monitoring Role"
            }
        },
        "collectQueryPerformance": {
            "type": "bool",
             "metadata": {
                "description": "Specify the Azure Region for your OMS Automation Account"
            }
        },
        "collectHanaTableInventory": {
            "type": "bool",
            "metadata": {
                "description": "Specify the Azure Region for your OMS Automation Account"
            }
        },
        "_artifactsLocation": {
            "type": "string",
            "defaultValue": "https://raw.githubusercontent.com/Volkanco/AzureDeploy/master/OMSSolutions/oms-sap-hana-monitoring-solution",
            "metadata": {
                "description": "The base URI where artifacts required by this template are located"
            }
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
            }
        }
    },
    "variables": {
        "runbooks": {
            "ingestParentRunbook": {
                "name": "AzureSAPHanaCollector-MS",
                "version": "1.0.0.1",
                "description": "Runbook to collect SAP Hana information and metrics into Log Analytics",
                "type": "PowerShell",
                "Id": ""
            },
            "ingestSchedulerRunbook": {
                "name": "AzureSAPHanaInitialization-MS",
                "version": "1.0.0.1",
                "description": "Runbook to automatically create required schedules and variables for SAP Hana data collection",
                "type": "PowerShell",
                "Id": ""
            }
        },
        "parentRunbookUri": "[concat(parameters('_artifactsLocation'),'/scripts/AzureSAPHanaCollector-MS.ps1', parameters('_artifactsLocationSasToken'))]",
        "schedulerRunbookUri": "[concat(parameters('_artifactsLocation'),'/scripts/AzureSAPHanaInitialization-MS.ps1', parameters('_artifactsLocationSasToken'))]",
        "omsSolutions": {
            "customSolution": {
                "name": "Azure SAP HANA Monitor",
                "solutionName": "[concat('AzureSAPHanaMonitoring', '[', parameters('logAnalyticsWorkspaceName'), ']')]",
                "publisher": "volkanc@microsoft.com",
                "displayName": "Azure SAP HANA Monitor",
                "description": "Monitor SAP Hana with Azure Log Analytics",
                "author": "volkanc@microsoft.com"
            }
        },
        "ingestSchedulerGuid": "[guid(uniqueString(resourceGroup().id, deployment().name))]",
        "opsInsightWorkspaceID": "AzureSAPHanaMonitoring-OPSINSIGHTS_WS_ID",
        "opsInsightWorkspaceIDType": "string",
        "opsInsightWorkspaceIDDescription": "Value of the user's omsWorkspaceId",
        "opsInsightWorkspaceKey": "AzureSAPHanaMonitoring-OPSINSIGHT_WS_KEY",
        "opsInsightWorkspaceKeyType": "string",
        "opsInsightWorkspaceKeyDescription": "Encrypted value of the user's omsWorkspaceKey",
        "createScheduleAutomationAccountName": "AzureSAPHanaMonitoring-AzureAutomationAccount-MS-Mgmt",
        "createScheduleAutomationAccountType": "string",
        "createScheduleAutomationAccountDescription": "The name of the Automation Account",
        "createScheduleResourceGroupName": "AzureSAPHanaMonitoring-AzureAutomationResourceGroup-MS-Mgmt",
        "createScheduleResourceGroupType": "string",
        "createScheduleResourceGroupDescription": "The name of the resource group",
        "omsAutomationSku": "basic",
        "ingestInterval": "1",
        "ingestFrequency": "hour",
        "ingestScheduleName": "AzureSAPHanaMonitoring-Scheduler-Hourly",
        "sapHanaConfigfolder": "c:\\HanaMonitor",
        "hanaMonitorDefaultUser":"AzureHanaMonitorUser",
        "hanaMonitorDefaultPassword":"AzureHanaMonitorPassword",
        "nestedTemplates": {
            "deployDashboards": "[concat(parameters('_artifactsLocation'), '/nestedtemplates/deployDashboards.json', parameters('_artifactsLocationSasToken'))]"
               },
                "alertArray": [
            {
                "searchName": "Azure VMs in Stopped State",
                "description": "Azure VMs which shutdown from within operating system  will continue incurring charges. Stop the VM from the portal to prevent unnecessary consumption.",
                "severity": "Warning",
                "query": "Type=AzureSAPHanaMonitoring_CL MetricName_s=VMInventory Status_s=Stopped | measure countdistinct(ID_s) by AzureSubscription_s,VmName_s",
                "alertTresholdValue": 0,
                "operator": "gt",
                "alertThrottleInMinutes": 60,
                "alertBreach": 1,
                "searchCategory": "Azure SAP HANA Monitor",
                "scheduleIntervalInMinutes": 15,
                "scheduleQueryTimeSpan": 15,
                "alertName": "Azure VM Found in Stopped State"
            },
            {
                "searchName": "Azure Quota Usage",
                "description": "Each Azure Subscription has quotas for VM cores per region. If the quota is reached new VMs annot be created",
                "severity": "Critical",
                "query": "Type=AzureSAPHanaMonitoring_CL MetricName_s=ARMVMUsageStats   | EXTEND div(product(currentValue_d,100),limit_d) as UsedPct | Measure Max(UsedPct) by Location_s,Usagemetric_s | where AggregatedValue >90",
                "alertTresholdValue": 0,
                "operator": "gt",
                "alertThrottleInMinutes": 60,
                "alertBreach": 1,
                "searchCategory": "Azure SAP HANA Monitor",
                "scheduleIntervalInMinutes": 60,
                "scheduleQueryTimeSpan": 60,
                "alertName": "Azure Quota Usage Reached  90% of the Subscription Quota"
            }
        ]
    },
    "resources": [
        {
            "name": "[parameters('logAnalyticsWorkspaceName')]",
            "type": "Microsoft.OperationalInsights/workspaces",
            "apiVersion": "2015-11-01-preview",
            "location": "[parameters('logAnalyticsRegion')]",
            "properties": {
                "sku": {
                    "name": "[first(parameters('linkedWorkspaceSKU'))]"
                }
            },
            "resources": [
                {
                    "apiVersion": "2015-11-01-preview",
                    "name": "[variables('omsSolutions').customSolution.name]",
                    "type": "views",
                    "id": "[resourceId('Microsoft.OperationalInsights/workspaces/views/', parameters('logAnalyticsWorkspaceName'), variables('omsSolutions').customSolution.name)]",
                    "dependson": [
                        "[Concat('Microsoft.OperationalInsights/workspaces/', parameters('logAnalyticsWorkspaceName'))]"
                    ],
                    "properties": {
                        "Name": "[variables('omsSolutions').customSolution.name]",
                        "DisplayName": "[variables('omsSolutions').customSolution.displayName]",
                        "Description": "[variables('omsSolutions').customSolution.description]",
                        "Author": "[variables('omsSolutions').customSolution.author]",
                        "Source": "Local",
                        "Dashboard": [
                            {
                                      "Id": "SingleQueryDonutBuilderBladeV1",
                                        "Type": "Blade",
                                        "Version": 0,
                                        "Configuration": {
                                            "General": {
                                                "title": "HANA Host Connectivity",
                                                "newGroup": false,
                                                "icon": "",
                                                "useIcon": false
                                            },
                                            "Header": {
                                                "Title": "HANA Connections",
                                                "Subtitle": ""
                                            },
                                            "Donut": {
                                                "Query": "SAPHana_CL | where CollectorType_s == \"State\" and Category== \"Connectivity\" | summarize LastCall=arg_max(TimeGenerated,*) by HOST_s | project Host=HOST_s,MinSinceLastData=datetime_diff('Minute',now(),LastCall),IsCollectorOnline=iff(LastCall< ago(1h),\"Offline\",\"Online\"),LastStatus=Connection_s |summarize count(Host) by IsCollectorOnline ",
                                                "CenterLegend": {
                                                    "Text": "Total",
                                                    "Operation": "Sum",
                                                    "ArcsToSelect": []
                                                },
                                                "Options": {
                                                    "colors": [
                                                        "#00188f",
                                                        "#0072c6",
                                                        "#00bcf2"
                                                    ],
                                                    "valueColorMapping": []
                                                },
                                                "NavigationSelect": {}
                                            },
                                            "List": {
                                                "Query": "SAPHana_CL | where CollectorType_s == \"State\" and Category== \"Connectivity\" | summarize LastCall=arg_max(TimeGenerated,*) by HOST_s | project Host=HOST_s,MinSinceLastData=datetime_diff('Minute',now(),LastCall),IsCollectorOnline=iff(LastCall< ago(1h),\"Offline\",\"Online\"),LastStatus=Connection_s | project Host, MinSinceLastData, IsCollectorOnline, LastStatus",
                                                "HideGraph": false,
                                                "enableSparklines": false,
                                                "ColumnsTitle": {
                                                    "Name": "Host",
                                                    "Value": "MinSinceLastData"
                                                },
                                                "Color": "#0072c6",
                                                "thresholds": {
                                                    "isEnabled": true,
                                                    "values": [
                                                        {
                                                            "name": "Normal",
                                                            "threshold": "Default",
                                                            "color": "#009e49",
                                                            "isDefault": true
                                                        },
                                                        {
                                                            "name": "Warning",
                                                            "threshold": "60",
                                                            "color": "#fcd116",
                                                            "isDefault": false
                                                        },
                                                        {
                                                            "name": "Error",
                                                            "threshold": "90",
                                                            "color": "#ba141a",
                                                            "isDefault": false
                                                        }
                                                    ]
                                                },
                                                "NameDSVSeparator": "",
                                                "NavigationQuery": "SAPHana_CL | where CollectorType_s == \"State\" and Category== \"Connectivity\" ",
                                                "NavigationSelect": {
                                                    "NavigationQuery": "SAPHana_CL | where CollectorType_s == \"State\" and Category== \"Connectivity\" "
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "Id": "SingleQueryDonutBuilderBladeV1",
                                        "Type": "Blade",
                                        "Version": 0,
                                        "Configuration": {
                                            "General": {
                                                "title": "Host State",
                                                "newGroup": false,
                                                "icon": "",
                                                "useIcon": false
                                            },
                                            "Header": {
                                                "Title": "All Services Started",
                                                "Subtitle": ""
                                            },
                                            "Donut": {
                                                "Query": "SAPHana_CL |where CollectorType_s ==\"State\" |where Category == \"Host\"  |summarize arg_max(TimeGenerated, *)by HOST_s  |summarize count() by All_started=All_Started_s ",
                                                "CenterLegend": {
                                                    "Text": "Total",
                                                    "Operation": "Sum",
                                                    "ArcsToSelect": []
                                                },
                                                "Options": {
                                                    "colors": [
                                                        "#00188f",
                                                        "#0072c6",
                                                        "#00bcf2"
                                                    ],
                                                    "valueColorMapping": []
                                                },
                                                "NavigationSelect": {}
                                            },
                                            "List": {
                                                "Query": "SAPHana_CL |where CollectorType_s ==\"State\" |where Category == \"Host\"  |summarize arg_max(TimeGenerated, *)by HOST_s  |project Instance=strcat(Instance_ID_s,'-',Instance_Number_s),Component=\"All_Started\",Status=All_Started_s |union (SAPHana_CL |where CollectorType_s ==\"State\" |where Category == \"Host\"  |summarize arg_max(TimeGenerated, *)by HOST_s  |project Instance=strcat(Instance_ID_s,'-',Instance_Number_s),Component=\"CPU\",Status=CPU_s), (SAPHana_CL |where CollectorType_s ==\"State\" |where Category == \"Host\"  |summarize arg_max(TimeGenerated, *)by HOST_s  |project Instance=strcat(Instance_ID_s,'-',Instance_Number_s),Component=\"MEMORY\",Status=Memory_s), (SAPHana_CL |where CollectorType_s ==\"State\" |where Category == \"Host\"  |summarize arg_max(TimeGenerated, *)by HOST_s  |project Instance=strcat(Instance_ID_s,'-',Instance_Number_s),Component=\"DISKDATA\",Status=DISKDATA_s),  (SAPHana_CL |where CollectorType_s ==\"State\" |where Category == \"Host\"  |summarize arg_max(TimeGenerated, *)by HOST_s   |project Instance=strcat(Instance_ID_s,'-',Instance_Number_s),Component=\"DISKLOG\",Status=DISKLOG_s),  (SAPHana_CL |where CollectorType_s ==\"State\" |where Category == \"Host\"  |summarize arg_max(TimeGenerated, *)by HOST_s   |project Instance=strcat(Instance_ID_s,'-',Instance_Number_s),Component=\"DISKTRACE\",Status=DISKTRACE_s), (SAPHana_CL |  where CollectorType_s == \"Inventory\" and Category==\"HostInfo\"  |summarize arg_max(TimeGenerated, *)by HOST_s  |project \tInstance=sid_s,Component=\"OS\",Status=os_name_s), (SAPHana_CL |  where CollectorType_s == \"Inventory\" and Category==\"HostInfo\"  |summarize arg_max(TimeGenerated, *)by HOST_s  |project \tInstance=sid_s,Component=\"CPU\",Status=cpu_summary_s), (SAPHana_CL |  where CollectorType_s == \"Inventory\" and Category==\"HostInfo\"  |summarize arg_max(TimeGenerated, *)by HOST_s  |project \tInstance=sid_s,Component=\"MEM\",Status=tostring(round(todecimal(mem_phys_s)/1024/1024/1024,0))), (SAPHana_CL |  where CollectorType_s == \"Inventory\" and Category==\"HostInfo\"  |summarize arg_max(TimeGenerated, *)by HOST_s  |project \tInstance=sid_s,Component=\"Version\",Status=build_version_s) |sort by Instance ",
                                                "HideGraph": true,
                                                "enableSparklines": false,
                                                "operation": "Summary",
                                                "ColumnsTitle": {
                                                    "Name": "OS",
                                                    "Value": ""
                                                },
                                                "Color": "#0072c6",
                                                "thresholds": {
                                                    "isEnabled": false,
                                                    "values": [
                                                        {
                                                            "name": "Normal",
                                                            "threshold": "Default",
                                                            "color": "#009e49",
                                                            "isDefault": true
                                                        },
                                                        {
                                                            "name": "Warning",
                                                            "threshold": "60",
                                                            "color": "#fcd116",
                                                            "isDefault": false
                                                        },
                                                        {
                                                            "name": "Error",
                                                            "threshold": "90",
                                                            "color": "#ba141a",
                                                            "isDefault": false
                                                        }
                                                    ]
                                                },
                                                "NameDSVSeparator": "",
                                                "NavigationQuery": "search {selected item} | sort by TimeGenerated desc",
                                                "NavigationSelect": {
                                                    "NavigationQuery": "search {selected item} | sort by TimeGenerated desc"
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "Id": "SingleQueryDonutBuilderBladeV1",
                                        "Type": "Blade",
                                        "Version": 0,
                                        "Configuration": {
                                            "General": {
                                                "title": "Services",
                                                "newGroup": false,
                                                "icon": "",
                                                "useIcon": false
                                            },
                                            "Header": {
                                                "Title": "Service Status",
                                                "Subtitle": ""
                                            },
                                            "Donut": {
                                                "Query": "let HanaConnectionTable=  SAPHana_CL | where CollectorType_s == \"State\" | where Category == \"Connectivity\" |summarize arg_max(TimeGenerated,* ) by HOST_s |project Host=HOST_s ,ConnectionStatus=Connection_s  ; HanaConnectionTable |join kind= fullouter (     SAPHana_CL     | where CollectorType_s ==\"Inventory\" and Category== \"Services\"     | summarize arg_max(TimeGenerated, *) by HOST_s,SERVICE_NAME_s     |project Instance=Instance_s,Host=HOST_s,  Status=ACTIVE_STATUS_s , Service=SERVICE_NAME_s ,Port=SQL_PORT_d ) on Host | project Host=strcat(Instance,\"; \",iff(isempty(Host),Host1 ,Host)) , Status=case(ConnectionStatus==\"Failed\", \"Unkown\",                         Status==\"YES\", \"Active\",                         Status), Service=iff(isempty(Service),\"Unkown\",Service) |summarize count(Service) by Status",
                                                "CenterLegend": {
                                                    "Text": "Total",
                                                    "Operation": "Sum",
                                                    "ArcsToSelect": []
                                                },
                                                "Options": {
                                                    "colors": [
                                                        "#00188f",
                                                        "#0072c6",
                                                        "#00bcf2"
                                                    ],
                                                    "valueColorMapping": []
                                                },
                                                "NavigationSelect": {}
                                            },
                                            "List": {
                                                "Query": "let HanaConnectionTable=  SAPHana_CL | where CollectorType_s == \"State\" | where Category == \"Connectivity\" |summarize arg_max(TimeGenerated,* ) by HOST_s |project Host=HOST_s ,ConnectionStatus=Connection_s  ; HanaConnectionTable |join kind= fullouter (     SAPHana_CL     | where CollectorType_s ==\"Inventory\" and Category== \"Services\"     | summarize arg_max(TimeGenerated, *) by HOST_s,SERVICE_NAME_s     |project Instance=Instance_s,Host=HOST_s,  Status=ACTIVE_STATUS_s , Service=SERVICE_NAME_s ,Port=SQL_PORT_d ) on Host | project Host=strcat(Instance,\"; \",iff(isempty(Host),Host1 ,Host)) ,Status=iff(ConnectionStatus==\"Failed\",\"Unkown\",Status),Service=iff(isempty(Service),\"Unkown\",Service) | project Host, IsActive=Status, Service | project Host, IsActive, Service",
                                                "HideGraph": true,
                                                "enableSparklines": false,
                                                "operation": "Summary",
                                                "ColumnsTitle": {
                                                    "Name": "Instance",
                                                    "Value": ""
                                                },
                                                "Color": "#0072c6",
                                                "thresholds": {
                                                    "isEnabled": false,
                                                    "values": [
                                                        {
                                                            "name": "Normal",
                                                            "threshold": "Default",
                                                            "color": "#009e49",
                                                            "isDefault": true
                                                        },
                                                        {
                                                            "name": "Warning",
                                                            "threshold": "60",
                                                            "color": "#fcd116",
                                                            "isDefault": false
                                                        },
                                                        {
                                                            "name": "Error",
                                                            "threshold": "90",
                                                            "color": "#ba141a",
                                                            "isDefault": false
                                                        }
                                                    ]
                                                },
                                                "NameDSVSeparator": "",
                                                "NavigationQuery": "let HanaConnectionTable=  SAPHana_CL | where CollectorType_s == \"State\" | where Category == \"Connectivity\" |summarize arg_max(TimeGenerated,* ) by HOST_s |project Host=HOST_s ,ConnectionStatus=Connection_s  ; HanaConnectionTable |join kind= fullouter (     SAPHana_CL     | where CollectorType_s ==\"Inventory\" and Category== \"Services\"     | summarize arg_max(TimeGenerated, *) by HOST_s,SERVICE_NAME_s     |project Instance=Instance_s,Host=HOST_s,  Status=ACTIVE_STATUS_s , Service=SERVICE_NAME_s ,Port=SQL_PORT_d ) on Host | project Host=strcat(Instance,\"; \",iff(isempty(Host),Host1 ,Host)) ,Status=iff(ConnectionStatus==\"Failed\",\"Unkown\",Status),Service=iff(isempty(Service),\"Unkown\",Service) | project Host, IsActive=Status, Service | project Host, IsActive, Service",
                                                "NavigationSelect": {
                                                    "NavigationQuery": "let HanaConnectionTable=  SAPHana_CL | where CollectorType_s == \"State\" | where Category == \"Connectivity\" |summarize arg_max(TimeGenerated,* ) by HOST_s |project Host=HOST_s ,ConnectionStatus=Connection_s  ; HanaConnectionTable |join kind= fullouter (     SAPHana_CL     | where CollectorType_s ==\"Inventory\" and Category== \"Services\"     | summarize arg_max(TimeGenerated, *) by HOST_s,SERVICE_NAME_s     |project Instance=Instance_s,Host=HOST_s,  Status=ACTIVE_STATUS_s , Service=SERVICE_NAME_s ,Port=SQL_PORT_d ) on Host | project Host=strcat(Instance,\"; \",iff(isempty(Host),Host1 ,Host)) ,Status=iff(ConnectionStatus==\"Failed\",\"Unkown\",Status),Service=iff(isempty(Service),\"Unkown\",Service) | project Host, IsActive=Status, Service | project Host, IsActive, Service"
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "Id": "LineChartBuilderBlade",
                                        "Type": "Blade",
                                        "Version": 0,
                                        "Configuration": {
                                            "General": {
                                                "title": "License Usage",
                                                "newGroup": false,
                                                "icon": "",
                                                "useIcon": false
                                            },
                                            "Header": {
                                                "Title": "Limit vs Usage",
                                                "Subtitle": ""
                                            },
                                            "LineChart": {
                                                "Query": "SAPHana_CL | where CollectorType_s ==\"Inventory\" | where Category == \"License\" |summarize Limit=max(PRODUCT_LIMIT_d), Usage=max(PRODUCT_USAGE_d) by  SYSTEMID=SYSTEM_ID_s ,bin(TimeGenerated, 1h)",
                                                "yAxis": {
                                                    "isLogarithmic": false,
                                                    "units": {
                                                        "baseUnitType": "",
                                                        "baseUnit": "",
                                                        "displayUnit": ""
                                                    },
                                                    "customLabel": ""
                                                },
                                                "NavigationSelect": {}
                                            },
                                            "List": {
                                                "Query": "SAPHana_CL | where CollectorType_s ==\"Inventory\" | where Category == \"License\" |summarize arg_max(TimeGenerated, *) by SYSTEM_ID_s,HOST_s |project SYSTEMID=SYSTEM_ID_s ,Valid=VALID_s,LimitandUsage=strcat(tostring(PRODUCT_LIMIT_d),'/',tostring(PRODUCT_USAGE_d)) | project SYSTEMID, Valid,  LimitandUsage",
                                                "HideGraph": true,
                                                "enableSparklines": false,
                                                "operation": "Summary",
                                                "ColumnsTitle": {
                                                    "Name": "Type",
                                                    "Value": ""
                                                },
                                                "Color": "#0072c6",
                                                "thresholds": {
                                                    "isEnabled": false,
                                                    "values": [
                                                        {
                                                            "name": "Normal",
                                                            "threshold": "Default",
                                                            "color": "#009e49",
                                                            "isDefault": true
                                                        },
                                                        {
                                                            "name": "Warning",
                                                            "threshold": "60",
                                                            "color": "#fcd116",
                                                            "isDefault": false
                                                        },
                                                        {
                                                            "name": "Error",
                                                            "threshold": "90",
                                                            "color": "#ba141a",
                                                            "isDefault": false
                                                        }
                                                    ]
                                                },
                                                "NameDSVSeparator": "",
                                                "NavigationQuery": "search {selected item} | sort by TimeGenerated desc",
                                                "NavigationSelect": {
                                                    "NavigationQuery": "search {selected item} | sort by TimeGenerated desc"
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "Id": "LineChartBuilderBlade",
                                        "Type": "Blade",
                                        "Version": 0,
                                        "Configuration": {
                                            "General": {
                                                "title": "Host and Service CPU Utilization",
                                                "newGroup": false,
                                                "icon": "",
                                                "useIcon": false
                                            },
                                            "Header": {
                                                "Title": "Host Utilization",
                                                "Subtitle": ""
                                            },
                                            "LineChart": {
                                                "Query": "SAPHana_CL |  where CollectorType_s has \"Performance\" | where PerfObject_s ==\"Host\" and PerfCounter_s ==\"CPU_PCT\"  | summarize CPU=avg(PerfValue_d) by Host=HOST_s, bin (TimeGenerated, 15m)",
                                                "yAxis": {
                                                    "isLogarithmic": false,
                                                    "units": {
                                                        "baseUnitType": "",
                                                        "baseUnit": "",
                                                        "displayUnit": ""
                                                    },
                                                    "customLabel": ""
                                                },
                                                "NavigationSelect": {}
                                            },
                                            "List": {
                                                "Query": "SAPHana_CL | where CollectorType_s has \"Performance\" | where PerfObject_s ==\"Service\" and PerfCounter_s ==\"PROCESS_CPU\"  and notempty(PerfInstance_s) and PerfInstance_s !='daemon' | summarize CPU=avg(PerfValue_d) by Path=strcat(HOST_s,\":\",PerfInstance_s), bin (TimeGenerated, 15m)",
                                                "HideGraph": false,
                                                "enableSparklines": true,
                                                "operation": "Average",
                                                "ColumnsTitle": {
                                                    "Name": "Type",
                                                    "Value": "ProcessCPU"
                                                },
                                                "Color": "#0072c6",
                                                "thresholds": {
                                                    "isEnabled": false,
                                                    "values": [
                                                        {
                                                            "name": "Normal",
                                                            "threshold": "Default",
                                                            "color": "#009e49",
                                                            "isDefault": true
                                                        },
                                                        {
                                                            "name": "Warning",
                                                            "threshold": "60",
                                                            "color": "#fcd116",
                                                            "isDefault": false
                                                        },
                                                        {
                                                            "name": "Error",
                                                            "threshold": "90",
                                                            "color": "#ba141a",
                                                            "isDefault": false
                                                        }
                                                    ]
                                                },
                                                "NameDSVSeparator": "",
                                                "NavigationQuery": "search {selected item} | sort by TimeGenerated desc",
                                                "NavigationSelect": {
                                                    "NavigationQuery": "search {selected item} | sort by TimeGenerated desc"
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "Id": "LineChartBuilderBlade",
                                        "Type": "Blade",
                                        "Version": 0,
                                        "Configuration": {
                                            "General": {
                                                "title": "Host Memory Usage",
                                                "newGroup": false,
                                                "icon": "",
                                                "useIcon": false
                                            },
                                            "Header": {
                                                "Title": "Used vs Peak Memory",
                                                "Subtitle": ""
                                            },
                                            "LineChart": {
                                                "Query": "SAPHana_CL | where CollectorType_s == \"Performance\" | where  PerfObject_s ==\"Memory\" and PerfCounter_s in(\"DatabaseResidentGB\",\"PeakUsedMemoryGB\",\"UsedMemoryGB\") |summarize AvgValue=avg(PerfValue_d) by Path=strcat(HOST_s,':',PerfCounter_s), bin(TimeGenerated, 15m)",
                                                "yAxis": {
                                                    "isLogarithmic": false,
                                                    "units": {
                                                        "baseUnitType": "",
                                                        "baseUnit": "",
                                                        "displayUnit": ""
                                                    },
                                                    "customLabel": ""
                                                },
                                                "NavigationSelect": {}
                                            },
                                            "List": {
                                                "Query": "SAPHana_CL | where CollectorType_s == \"Performance\" | where  PerfObject_s ==\"Memory\" and PerfCounter_s in(\"DatabaseResidentGB\",\"PeakUsedMemoryGB\",\"UsedMemoryGB\") |summarize arg_max(TimeGenerated, *) by HOST_s ,PerfObject_s,PerfCounter_s | project HOST=HOST_s ,Counter=PerfCounter_s,Value=PerfValue_d",
                                                "HideGraph": false,
                                                "enableSparklines": false,
                                                "operation": "Summary",
                                                "ColumnsTitle": {
                                                    "Name": "Host",
                                                    "Value": "GB"
                                                },
                                                "Color": "#0072c6",
                                                "thresholds": {
                                                    "isEnabled": false,
                                                    "values": [
                                                        {
                                                            "name": "Normal",
                                                            "threshold": "Default",
                                                            "color": "#009e49",
                                                            "isDefault": true
                                                        },
                                                        {
                                                            "name": "Warning",
                                                            "threshold": "60",
                                                            "color": "#fcd116",
                                                            "isDefault": false
                                                        },
                                                        {
                                                            "name": "Error",
                                                            "threshold": "90",
                                                            "color": "#ba141a",
                                                            "isDefault": false
                                                        }
                                                    ]
                                                },
                                                "NameDSVSeparator": "",
                                                "NavigationQuery": "search {selected item} | sort by TimeGenerated desc",
                                                "NavigationSelect": {
                                                    "NavigationQuery": "search {selected item} | sort by TimeGenerated desc"
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "Id": "SingleQueryDonutBuilderBladeV1",
                                        "Type": "Blade",
                                        "Version": 0,
                                        "Configuration": {
                                            "General": {
                                                "title": "Memory Usage by Component",
                                                "newGroup": false,
                                                "icon": "",
                                                "useIcon": false
                                            },
                                            "Header": {
                                                "Title": "",
                                                "Subtitle": ""
                                            },
                                            "Donut": {
                                                "Query": "SAPHana_CL |where CollectorType_s ==\"Performance\" |where PerfObject_s  == \"Memory\" and PerfCounter_s ==\"Component\" |summarize arg_max(TimeGenerated, *) by HOST_s,PerfInstance_s |project strcat(HOST_s,':',PerfInstance_s),MEMUsageGB=round(PerfValue_d/1024,2)|sort by MEMUsageGB desc",
                                                "CenterLegend": {
                                                    "Text": "Total",
                                                    "Operation": "Sum",
                                                    "ArcsToSelect": []
                                                },
                                                "Options": {
                                                    "colors": [
                                                        "#00188f",
                                                        "#0072c6",
                                                        "#00bcf2"
                                                    ],
                                                    "valueColorMapping": []
                                                },
                                                "NavigationSelect": {}
                                            },
                                            "List": {
                                                "Query": "SAPHana_CL |where CollectorType_s ==\"Performance\" |where PerfObject_s  == \"Memory\" and PerfCounter_s ==\"Component\" |summarize arg_max(TimeGenerated, *) by HOST_s,PerfInstance_s |project Host=HOST_s,Component=PerfInstance_s,MEMUsageGB=round(PerfValue_d/1024,2) |sort by MEMUsageGB desc",
                                                "HideGraph": false,
                                                "enableSparklines": false,
                                                "operation": "Summary",
                                                "ColumnsTitle": {
                                                    "Name": "Host",
                                                    "Value": "UsedGB"
                                                },
                                                "Color": "#0072c6",
                                                "thresholds": {
                                                    "isEnabled": false,
                                                    "values": [
                                                        {
                                                            "name": "Normal",
                                                            "threshold": "Default",
                                                            "color": "#009e49",
                                                            "isDefault": true
                                                        },
                                                        {
                                                            "name": "Warning",
                                                            "threshold": "60",
                                                            "color": "#fcd116",
                                                            "isDefault": false
                                                        },
                                                        {
                                                            "name": "Error",
                                                            "threshold": "90",
                                                            "color": "#ba141a",
                                                            "isDefault": false
                                                        }
                                                    ]
                                                },
                                                "NameDSVSeparator": "",
                                                "NavigationQuery": "search {selected item} | sort by TimeGenerated desc",
                                                "NavigationSelect": {
                                                    "NavigationQuery": "search {selected item} | sort by TimeGenerated desc"
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "Id": "SingleQueryDonutBuilderBladeV1",
                                        "Type": "Blade",
                                        "Version": 0,
                                        "Configuration": {
                                            "General": {
                                                "title": "Alerts",
                                                "newGroup": false,
                                                "icon": "",
                                                "useIcon": false
                                            },
                                            "Header": {
                                                "Title": "Open Alerts",
                                                "Subtitle": ""
                                            },
                                            "Donut": {
                                                "Query": "SAPHana_CL | where CollectorType_s ==\"Inventory\" | where Category == \"Alerts\" |summarize arg_max(TimeGenerated, *) by HOST_s ,Database_s,ALERT_ID_d | project Host=strcat(ALERT_HOST_s ,\" ; \",Database_s),Alert=strcat(ALERT_NAME_s,\" ; \",ALERT_DETAILS_s),Rating=ALERT_RATING_d | project Host,  Alert, Rating |summarize AlertCount=count() by Rating ",
                                                "CenterLegend": {
                                                    "Text": "Total",
                                                    "Operation": "Sum",
                                                    "ArcsToSelect": []
                                                },
                                                "Options": {
                                                    "colors": [
                                                        "#eb3c00",
                                                        "#ff8c00",
                                                        "#fff100"
                                                    ],
                                                    "valueColorMapping": []
                                                },
                                                "NavigationSelect": {}
                                            },
                                            "List": {
                                                "Query": "SAPHana_CL | where CollectorType_s ==\"Inventory\" | where Category == \"Alerts\" |summarize arg_max(TimeGenerated, *) by HOST_s ,Database_s,ALERT_ID_d | project Host=strcat(ALERT_HOST_s ,\" ; \",Database_s),Alert=strcat(ALERT_NAME_s,\" ; \",ALERT_DETAILS_s),Rating=ALERT_RATING_d | project Host,  Alert, Rating",
                                                "HideGraph": false,
                                                "enableSparklines": false,
                                                "operation": "Summary",
                                                "ColumnsTitle": {
                                                    "Name": "Computer",
                                                    "Value": "Count"
                                                },
                                                "Color": "#0072c6",
                                                "thresholds": {
                                                    "isEnabled": false,
                                                    "values": [
                                                        {
                                                            "name": "Normal",
                                                            "threshold": "Default",
                                                            "color": "#009e49",
                                                            "isDefault": true
                                                        },
                                                        {
                                                            "name": "Warning",
                                                            "threshold": "60",
                                                            "color": "#fcd116",
                                                            "isDefault": false
                                                        },
                                                        {
                                                            "name": "Error",
                                                            "threshold": "90",
                                                            "color": "#ba141a",
                                                            "isDefault": false
                                                        }
                                                    ]
                                                },
                                                "NameDSVSeparator": "",
                                                "NavigationQuery": "SAPHana_CL | where CollectorType_s ==\"Inventory\" | where Category == \"Alerts\" |summarize arg_max(TimeGenerated, *) by HOST_s ,Database_s,ALERT_ID_d | project Host=strcat(ALERT_HOST_s ,\" ; \",Database_s),Alert=strcat(ALERT_NAME_s,\" ; \",ALERT_DETAILS_s),Rating=ALERT_RATING_d | project Host,  Alert, Rating",
                                                "NavigationSelect": {
                                                    "NavigationQuery": "SAPHana_CL | where CollectorType_s ==\"Inventory\" | where Category == \"Alerts\" |summarize arg_max(TimeGenerated, *) by HOST_s ,Database_s,ALERT_ID_d | project Host=strcat(ALERT_HOST_s ,\" ; \",Database_s),Alert=strcat(ALERT_NAME_s,\" ; \",ALERT_DETAILS_s),Rating=ALERT_RATING_d | project Host,  Alert, Rating"
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "Id": "SingleQueryDonutBuilderBladeV1",
                                        "Type": "Blade",
                                        "Version": 0,
                                        "Configuration": {
                                            "General": {
                                                "title": "Backup Size",
                                                "newGroup": false,
                                                "icon": "",
                                                "useIcon": false
                                            },
                                            "Header": {
                                                "Title": "Size in GB",
                                                "Subtitle": ""
                                            },
                                            "Donut": {
                                                "Query": "SAPHana_CL | where CollectorType_s ==\"Inventory\" and Category== \"Backup\" | summarize arg_max(TimeGenerated, *) by Database_s,SERVICE_NAME_s,ENTRY_TYPE_NAME_s |project DB=strcat(Instance_s,\" : \",Database_s,\" : \",SERVICE_NAME_s),SizeinGB= round(ESTIMATED_SIZE_d/1024,2)",
                                                "CenterLegend": {
                                                    "Text": "Total_GB",
                                                    "Operation": "Sum",
                                                    "ArcsToSelect": []
                                                },
                                                "Options": {
                                                    "colors": [
                                                        "#00188f",
                                                        "#0072c6",
                                                        "#00bcf2"
                                                    ],
                                                    "valueColorMapping": []
                                                },
                                                "NavigationSelect": {}
                                            },
                                            "List": {
                                                "Query": "SAPHana_CL | where CollectorType_s ==\"Inventory\" and Category== \"Backup\" | summarize arg_max(TimeGenerated, *) by Database_s,SERVICE_NAME_s,ENTRY_TYPE_NAME_s |project DB=strcat(Instance_s,\" : \",Database_s,\" : \",SERVICE_NAME_s),BackupType=ENTRY_TYPE_NAME_s,SizeinGB= round(ESTIMATED_SIZE_d/1024,2)",
                                                "HideGraph": false,
                                                "enableSparklines": false,
                                                "operation": "Summary",
                                                "ColumnsTitle": {
                                                    "Name": "Computer",
                                                    "Value": "SizeinGB"
                                                },
                                                "Color": "#0072c6",
                                                "thresholds": {
                                                    "isEnabled": false,
                                                    "values": [
                                                        {
                                                            "name": "Normal",
                                                            "threshold": "Default",
                                                            "color": "#009e49",
                                                            "isDefault": true
                                                        },
                                                        {
                                                            "name": "Warning",
                                                            "threshold": "60",
                                                            "color": "#fcd116",
                                                            "isDefault": false
                                                        },
                                                        {
                                                            "name": "Error",
                                                            "threshold": "90",
                                                            "color": "#ba141a",
                                                            "isDefault": false
                                                        }
                                                    ]
                                                },
                                                "NameDSVSeparator": "",
                                                "NavigationQuery": "search {selected item} | sort by TimeGenerated desc",
                                                "NavigationSelect": {
                                                    "NavigationQuery": "search {selected item} | sort by TimeGenerated desc"
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "Id": "SingleQueryDonutBuilderBladeV1",
                                        "Type": "Blade",
                                        "Version": 0,
                                        "Configuration": {
                                            "General": {
                                                "title": "Disks",
                                                "newGroup": false,
                                                "icon": "",
                                                "useIcon": false
                                            },
                                            "Header": {
                                                "Title": "Used GB",
                                                "Subtitle": ""
                                            },
                                            "Donut": {
                                                "Query": "SAPHana_CL | where CollectorType_s ==\"Inventory\" and Category== \"Disks\" | summarize arg_max(TimeGenerated, *) by PATH_s,SUBPATH_s,DEVICE_ID_d |project Host=strcat(HOST_s,\" : \" ,USAGE_TYPE_s), Path=PATH_s,SizeinGb=round(TOTAL_SIZE_d,0),UsedGB=round(USED_SIZE_d,0) | project strcat(Host,\" : \", Path), UsedGB",
                                                "CenterLegend": {
                                                    "Text": "Total",
                                                    "Operation": "Sum",
                                                    "ArcsToSelect": []
                                                },
                                                "Options": {
                                                    "colors": [
                                                        "#eb3c00",
                                                        "#ffb900",
                                                        "#00bcf2"
                                                    ],
                                                    "valueColorMapping": []
                                                },
                                                "NavigationSelect": {}
                                            },
                                            "List": {
                                                "Query": "SAPHana_CL | where CollectorType_s ==\"Inventory\" and Category== \"Disks\" | summarize arg_max(TimeGenerated, *) by PATH_s,SUBPATH_s,DEVICE_ID_d |project Host=strcat(HOST_s,\" : \" ,USAGE_TYPE_s), Path=PATH_s,SizeinGb=round(TOTAL_SIZE_d,0),UsedGB=round(USED_SIZE_d,0) | project Host, Path, SizevsUsed=strcat(SizeinGb,\"/\", UsedGB)",
                                                "HideGraph": true,
                                                "enableSparklines": false,
                                                "operation": "Summary",
                                                "ColumnsTitle": {
                                                    "Name": "Host",
                                                    "Value": ""
                                                },
                                                "Color": "#0072c6",
                                                "thresholds": {
                                                    "isEnabled": false,
                                                    "values": [
                                                        {
                                                            "name": "Normal",
                                                            "threshold": "Default",
                                                            "color": "#009e49",
                                                            "isDefault": true
                                                        },
                                                        {
                                                            "name": "Warning",
                                                            "threshold": "60",
                                                            "color": "#fcd116",
                                                            "isDefault": false
                                                        },
                                                        {
                                                            "name": "Error",
                                                            "threshold": "90",
                                                            "color": "#ba141a",
                                                            "isDefault": false
                                                        }
                                                    ]
                                                },
                                                "NameDSVSeparator": "",
                                                "NavigationQuery": "SAPHana_CL | where CollectorType_s ==\"Inventory\" and Category== \"Disks\" | summarize arg_max(TimeGenerated, *) by PATH_s,SUBPATH_s,DEVICE_ID_d |project Host=strcat(HOST_s,\" : \" ,USAGE_TYPE_s), Path=PATH_s,SizeinGb=round(TOTAL_SIZE_d,0),UsedGB=round(USED_SIZE_d,0) | project Host, Path, SizeinGb, UsedGB",
                                                "NavigationSelect": {
                                                    "NavigationQuery": "SAPHana_CL | where CollectorType_s ==\"Inventory\" and Category== \"Disks\" | summarize arg_max(TimeGenerated, *) by PATH_s,SUBPATH_s,DEVICE_ID_d |project Host=strcat(HOST_s,\" : \" ,USAGE_TYPE_s), Path=PATH_s,SizeinGb=round(TOTAL_SIZE_d,0),UsedGB=round(USED_SIZE_d,0) | project Host, Path, SizeinGb, UsedGB"
                                                }
                                            }
                                        }
                                    },
                                    {
                                        "Id": "LineChartCalloutStackedBuilderBlade",
                                        "Type": "Blade",
                                        "Version": 0,
                                        "Configuration": {
                                            "General": {
                                                "title": "Service Performance - I",
                                                "newGroup": false
                                            },
                                            "charts": [
                                                {
                                                    "Header": {
                                                        "Title": "Requests Per Second",
                                                        "Subtitle": ""
                                                    },
                                                    "LineChart": {
                                                        "Query": "SAPHana_CL |where CollectorType_s ==\"Performance\" and PerfObject_s ==\"Service\" |where PerfInstance_s != \"daemon\"  | where PerfCounter_s == \"REQUESTS_PER_SEC\" |summarize avg(PerfValue_d) by PerfCounter_s,PerfInstance_s,bin(TimeGenerated, 15m)",
                                                        "yAxis": {
                                                            "isLogarithmic": false,
                                                            "units": {
                                                                "baseUnitType": "",
                                                                "baseUnit": "",
                                                                "displayUnit": ""
                                                            },
                                                            "customLabel": ""
                                                        },
                                                        "NavigationSelect": {}
                                                    }
                                                },
                                                {
                                                    "Header": {
                                                        "Title": "Transaction Count",
                                                        "Subtitle": ""
                                                    },
                                                    "LineChart": {
                                                        "Query": "SAPHana_CL |where CollectorType_s ==\"Performance\" and PerfObject_s ==\"Service\" |where PerfInstance_s != \"daemon\"  | where PerfCounter_s == \"TRANSACTION_COUNT\" |summarize avg(PerfValue_d) by PerfCounter_s,PerfInstance_s,bin(TimeGenerated, 15m)",
                                                        "yAxis": {
                                                            "isLogarithmic": false,
                                                            "units": {
                                                                "baseUnitType": "",
                                                                "baseUnit": "",
                                                                "displayUnit": ""
                                                            },
                                                            "customLabel": ""
                                                        },
                                                        "NavigationSelect": {}
                                                    }
                                                },
                                                {
                                                    "Header": {
                                                        "Title": "Handle Count",
                                                        "Subtitle": ""
                                                    },
                                                    "LineChart": {
                                                        "Query": "SAPHana_CL |where CollectorType_s ==\"Performance\" and PerfObject_s ==\"Service\" |where PerfInstance_s != \"daemon\"  | where PerfCounter_s == \"HANDLE_COUNT\" |join kind= inner (   SAPHana_CL |where CollectorType_s ==\"Inventory\" and Category  ==\"Services\"  |summarize arg_max(TimeGenerated, *)by HOST_s,PORT_d  |project HOST_s ,Port=PORT_d,Service=SERVICE_NAME_s  ) on $left.PerfInstance_d==$right.Port and $left.HOST_s==$right.HOST_s |summarize avg(PerfValue_d) by PerfCounter_s,Service,bin(TimeGenerated, 15m)",
                                                        "yAxis": {
                                                            "isLogarithmic": false,
                                                            "units": {
                                                                "baseUnitType": "",
                                                                "baseUnit": "",
                                                                "displayUnit": ""
                                                            },
                                                            "customLabel": ""
                                                        },
                                                        "NavigationSelect": {}
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "Id": "LineChartCalloutStackedBuilderBlade",
                                        "Type": "Blade",
                                        "Version": 0,
                                        "Configuration": {
                                            "General": {
                                                "title": "Service Performance - II",
                                                "newGroup": false
                                            },
                                            "charts": [
                                                {
                                                    "Header": {
                                                        "Title": "Connection Count",
                                                        "Subtitle": ""
                                                    },
                                                    "LineChart": {
                                                        "Query": "SAPHana_CL |where CollectorType_s ==\"Performance\" and PerfObject_s ==\"Service\" |where PerfInstance_s != \"daemon\"  | where PerfCounter_s == \"CONNECTION_COUNT\" |join kind= inner (   SAPHana_CL |where CollectorType_s ==\"Inventory\" and Category  ==\"Services\"  |summarize arg_max(TimeGenerated, *)by HOST_s,PORT_d  |project HOST_s ,Port=PORT_d,Service=SERVICE_NAME_s  ) on $left.PerfInstance_d==$right.Port and $left.HOST_s==$right.HOST_s |summarize AVG=avg(PerfValue_d) by PerfCounter_s,Service,bin(TimeGenerated, 15m)",
                                                        "yAxis": {
                                                            "isLogarithmic": false,
                                                            "units": {
                                                                "baseUnitType": "",
                                                                "baseUnit": "",
                                                                "displayUnit": ""
                                                            },
                                                            "customLabel": ""
                                                        },
                                                        "NavigationSelect": {}
                                                    }
                                                },
                                                {
                                                    "Header": {
                                                        "Title": "Response Time",
                                                        "Subtitle": ""
                                                    },
                                                    "LineChart": {
                                                        "Query": "SAPHana_CL |where CollectorType_s ==\"Performance\" and PerfObject_s ==\"Service\" |where PerfInstance_s != \"daemon\"  | where PerfCounter_s == \"RESPONSE_TIME\" |summarize Avg=avg(PerfValue_d) by PerfCounter_s,PerfInstance_s,bin(TimeGenerated, 15m)",
                                                        "yAxis": {
                                                            "isLogarithmic": false,
                                                            "units": {
                                                                "baseUnitType": "",
                                                                "baseUnit": "",
                                                                "displayUnit": ""
                                                            },
                                                            "customLabel": ""
                                                        },
                                                        "NavigationSelect": {}
                                                    }
                                                },
                                                {
                                                    "Header": {
                                                        "Title": "Statement Count",
                                                        "Subtitle": ""
                                                    },
                                                    "LineChart": {
                                                        "Query": "SAPHana_CL |where CollectorType_s ==\"Performance\" and PerfObject_s ==\"Service\" |where PerfInstance_s != \"daemon\"  | where PerfCounter_s == \"STATEMENT_COUNT\" |join kind= inner (   SAPHana_CL |where CollectorType_s ==\"Inventory\" and Category  ==\"Services\"  |summarize arg_max(TimeGenerated, *)by HOST_s,PORT_d  |project HOST_s ,Port=PORT_d,Service=SERVICE_NAME_s  ) on $left.PerfInstance_d==$right.Port and $left.HOST_s==$right.HOST_s |summarize AVG=avg(PerfValue_d) by PerfCounter_s,Service,bin(TimeGenerated, 15m)",
                                                        "yAxis": {
                                                            "isLogarithmic": false,
                                                            "units": {
                                                                "baseUnitType": "",
                                                                "baseUnit": "",
                                                                "displayUnit": ""
                                                            },
                                                            "customLabel": ""
                                                        },
                                                        "NavigationSelect": {}
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ],
                                "Filters": [],
                                "OverviewTile": {
                                    "Id": "LineChartCalloutBuilderTile",
                                    "Type": "OverviewTile",
                                    "Version": 2,
                                    "Configuration": {
                                        "LineChart": {
                                            "Query": "SAPHana_CL |  where CollectorType_s has \"Performance\" | where PerfObject_s ==\"Host\" and PerfCounter_s ==\"CPU_PCT\"  | summarize CPU=avg(PerfValue_d) by Host=HOST_s, bin (TimeGenerated, 15m)",
                                            "Callout": {
                                                "Title": "Average",
                                                "Series": "HOST CPU Utilization",
                                                "Operation": "Average"
                                            },
                                            "yAxis": {
                                                "isLogarithmic": false,
                                                "units": {
                                                    "baseUnitType": "",
                                                    "baseUnit": "",
                                                    "displayUnit": ""
                                                },
                                                "customLabel": ""
                                            }
                                        },
                                        "Advanced": {
                                            "DataFlowVerification": {
                                                "Enabled": false,
                                                "Query": "search * | limit 1 | project TimeGenerated",
                                                "Message": ""
                                            }
                                        }
                                    }
                                }
                            }
                }
            ]
        },
        {
            "apiversion": "2015-10-31",
            "location": "[parameters('automationRegion')]",
            "name": "[parameters('automationAccountName')]",
            "type": "Microsoft.Automation/automationAccounts",
            "properties": {
                "sku": {
                    "name": "[last(parameters('linkedWorkspaceSKU'))]"
                }
            },
            "resources": [
                {
                    "name": "[variables('opsInsightWorkspaceID')]",
                    "type": "variables",
                    "apiVersion": "2015-10-31",
                    "dependsOn": [
                        "[concat('Microsoft.Automation/automationAccounts/', parameters('automationAccountName'))]"
                    ],
                    "tags": {},
                    "properties": {
                        "description": "[variables('opsInsightWorkspaceIDDescription')]",
                        "isEncrypted": 0,
                        "type": "[variables('opsInsightWorkspaceIDType')]",
                        "value": "[concat('\"',reference(resourceId('Microsoft.OperationalInsights/workspaces/', parameters('logAnalyticsWorkspaceName')), '2015-11-01-preview').customerId,'\"')]"
                    }
                },
                {
                    "name": "[variables('opsInsightWorkspaceKey') ]",
                    "type": "variables",
                    "apiVersion": "2015-10-31",
                    "dependsOn": [
                        "[concat('Microsoft.Automation/automationAccounts/', parameters('automationAccountName'))]"
                    ],
                    "tags": {},
                    "properties": {
                        "description": "[variables('opsInsightWorkspaceKeyDescription')]",
                        "isEncrypted": 1,
                        "type": "[variables('opsInsightWorkspaceKeyType')]",
                        "value": "[concat('\"',listKeys(resourceId('Microsoft.OperationalInsights/workspaces/', parameters('logAnalyticsWorkspaceName')), '2015-11-01-preview').primarySharedKey,'\"')]"
                    }
                },
                {
                    "name": "[variables('createScheduleAutomationAccountName')]",
                    "type": "variables",
                    "apiVersion": "2015-10-31",
                    "dependsOn": [
                        "[concat('Microsoft.Automation/automationAccounts/', parameters('automationAccountName'))]"
                    ],
                    "tags": {},
                    "properties": {
                        "description": "[variables('createScheduleAutomationAccountDescription')]",
                        "isEncrypted": 0,
                        "type": "[variables('createScheduleAutomationAccountType')]",
                        "value": "[concat('\"', parameters('automationAccountName'),'\"')]"
                    }
                },
                {
                    "name": "[variables('createScheduleResourceGroupName')]",
                    "type": "variables",
                    "apiVersion": "2015-10-31",
                    "dependsOn": [
                        "[concat('Microsoft.Automation/automationAccounts/', parameters('automationAccountName'))]"
                    ],
                    "tags": {},
                    "properties": {
                        "description": "[variables('createScheduleResourceGroupDescription')]",
                        "isEncrypted": 0,
                        "type": "[variables('createScheduleResourceGroupType')]",
                        "value": "[concat('\"', resourceGroup().name, '\"')]"
                    }
                },
                {
                    "name": "[variables('runbooks').ingestParentRunbook.name]",
                    "type": "runbooks",
                    "apiVersion": "2015-10-31",
                    "location": "[parameters('automationRegion')]",
                    "dependsOn": [
                        "[concat('Microsoft.Automation/automationAccounts/', parameters('automationAccountName'))]",
                        "[concat('Microsoft.Automation/automationAccounts/', parameters('automationAccountName'), '/variables/', variables('opsInsightWorkspaceID'))]",
                        "[concat('Microsoft.Automation/automationAccounts/', parameters('automationAccountName'), '/variables/', variables('opsInsightWorkspaceKey'))]"
                    ],
                    "tags": {},
                    "properties": {
                        "runbookType": "[variables('runbooks').ingestParentRunbook.type]",
                        "logProgress": "false",
                        "logVerbose": "false",
                        "description": "[variables('runbooks').ingestParentRunbook.description]",
                        "publishContentLink": {
                            "uri": "[variables('parentRunbookUri')]",
                            "version": "[variables('runbooks').ingestParentRunbook.version]"
                        }
                    }
                },
                {
                    "name": "[variables('runbooks').ingestSchedulerRunbook.name]",
                    "type": "runbooks",
                    "apiVersion": "2015-10-31",
                    "location": "[parameters('automationRegion')]",
                    "dependsOn": [
                        "[concat('Microsoft.Automation/automationAccounts/', parameters('automationAccountName'))]",
                        "[concat('Microsoft.Automation/automationAccounts/', parameters('automationAccountName'), '/variables/', variables('opsInsightWorkspaceID'))]",
                        "[concat('Microsoft.Automation/automationAccounts/', parameters('automationAccountName'), '/variables/', variables('opsInsightWorkspaceKey'))]"
                    ],
                    "tags": {},
                    "properties": {
                        "runbookType": "[variables('runbooks').ingestSchedulerRunbook.type]",
                        "logProgress": "false",
                        "logVerbose": "false",
                        "description": "[variables('runbooks').ingestSchedulerRunbook.description]",
                        "publishContentLink": {
                            "uri": "[variables('schedulerRunbookUri')]",
                            "version": "[variables('runbooks').ingestSchedulerRunbook.version]"
                        }
                    }
                },
                {
                    "name": "[concat(parameters('automationAccountName'), '/', variables('ingestscheduleName'),'-',variables('ingestSchedulerGuid'))]",
                    "type": "microsoft.automation/automationAccounts/schedules",
                    "apiVersion": "2015-10-31",
                    "location": "[parameters('automationRegion')]",
                    "dependsOn": [
                        "[concat('Microsoft.Automation/automationAccounts/', parameters('automationAccountName'))]",
                        "[concat('Microsoft.Automation/automationAccounts/', parameters('automationAccountName'), '/runbooks/', variables('runbooks').ingestSchedulerRunbook.name)]"
                    ],
                    "tags": {},
                    "properties": {
                        "description": "OMS Ingestion API Scheduler",
                        "startTime": "",
                        "isEnabled": "true",
                        "interval": "[variables('ingestInterval')]",
                        "frequency": "[variables('ingestFrequency')]"
                    }
                },
                {
                    "name": "[concat(parameters('automationAccountName'), '/', variables('ingestSchedulerGuid'))]",
                    "type": "microsoft.automation/automationAccounts/jobSchedules",
                    "apiVersion": "2015-10-31",
                    "location": "[parameters('automationRegion')]",
                    "dependsOn": [
                        "[concat('Microsoft.Automation/automationAccounts/', parameters('automationAccountName'), '/schedules/', variables('ingestscheduleName'),'-',variables('ingestSchedulerGuid'))]",
                        "[concat('Microsoft.Automation/automationAccounts/', parameters('automationAccountName'), '/runbooks/', variables('runbooks').ingestSchedulerRunbook.name)]",
                        "[concat('Microsoft.Automation/automationAccounts/', parameters('automationAccountName'))]"
                    ],
                    "tags": {},
                    "properties": {
                        "schedule": {
                            "name": "[concat(variables('ingestscheduleName'),'-',variables('ingestSchedulerGuid'))]"
                        },
                        "runbook": {
                            "name": "[variables('Runbooks').ingestSchedulerRunbook.name]"
                        },
                         "parameters": {
                            "frequency": "[parameters('dataCollectionFrequency')]",
                            "collectQueryPerformance": "[parameters('collectQueryPerformance')]",
                            "collectHanaTableInventory": "[parameters('collectHanaTableInventory')]",
                            "configFolder": "[variables('sapHanaConfigfolder')]",
                            "defaultProfileUser": "[parameters('sapHanaMonitorUser')]",
                            "defaultProfilePassword": "[parameters('sapHanaMonitorPassword')]"
                        }
                    }
                }
            ]
        },
        {
            "condition": "[equals(parameters('workspaceType'), 'Linked')]",
            "type": "Microsoft.OperationalInsights/workspaces/linkedServices",
            "name": "[concat(parameters('logAnalyticsWorkspaceName'), '/' , 'Automation')]",
            "apiVersion": "2015-11-01-preview",
            "location": "[parameters('logAnalyticsRegion')]",
            "properties": {
                "resourceId": "[resourceId('Microsoft.Automation/automationAccounts/',parameters('automationAccountName'))]"
            },
            "dependsOn": []
        },
        {
            "name": "[variables('omsSolutions').customSolution.solutionName]",
            "type": "Microsoft.OperationsManagement/solutions",
            "apiVersion": "2015-11-01-preview",
            "location": "[parameters('logAnalyticsRegion')]",
            "dependsOn": [
                "[concat('Microsoft.OperationalInsights/workspaces/', parameters('logAnalyticsWorkspaceName'))]",
                "[concat('Microsoft.Automation/automationAccounts/', parameters('automationAccountName'))]",
                "[concat('Microsoft.OperationalInsights/workspaces/', parameters('logAnalyticsWorkspaceName'), '/views/', variables('omsSolutions').customSolution.name)]",
                "[concat('Microsoft.Automation/automationAccounts/', parameters('automationAccountName'), '/runbooks/', variables('runbooks').ingestSchedulerRunbook.name)]",
                "[concat('Microsoft.Automation/automationAccounts/', parameters('automationAccountName'), '/runbooks/', variables('runbooks').ingestParentRunbook.name)]"
            ],
            "plan": {
                "name": "[variables('omsSolutions').customSolution.solutionName]",
                "product": "[variables('omsSolutions').customSolution.name]",
                "publisher": "[variables('omsSolutions').customSolution.publisher]",
                "promotionCode": ""
            },
            "properties": {
                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces/', parameters('logAnalyticsWorkspaceName'))]",
                "referencedResources": [],
                "containedResources": [
                    "[resourceId('Microsoft.OperationalInsights/workspaces/views/', parameters('logAnalyticsWorkspaceName'), variables('omsSolutions').customSolution.name)]",
                    "[resourceId('Microsoft.Automation/automationAccounts/runbooks/', parameters('automationAccountName'), variables('runbooks').ingestSchedulerRunbook.name)]",
                    "[resourceId('Microsoft.Automation/automationAccounts/runbooks/', parameters('automationAccountName'), variables('runbooks').ingestParentRunbook.name)]",
                    "[resourceId('Microsoft.Automation/automationAccounts/variables/', parameters('automationAccountName'), variables('opsInsightWorkspaceID'))]",
                    "[resourceId('Microsoft.Automation/automationAccounts/variables/', parameters('automationAccountName'), variables('opsInsightWorkspaceKey'))]",
                    "[resourceId('Microsoft.Automation/automationAccounts/variables/', parameters('automationAccountName'), variables('createScheduleAutomationAccountName'))]",
                    "[resourceId('Microsoft.Automation/automationAccounts/variables/', parameters('automationAccountName'), variables('createScheduleResourceGroupName'))]"
                ]
            }
        },
        {
            "apiVersion": "2015-11-01-preview",
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
            "name": "[concat(parameters('logAnalyticsWorkspaceName'), '/', tolower(variables('alertArray')[copyIndex()].searchCategory), '|', toLower(variables('alertArray')[copyIndex()].searchName))]",
            "copy": {
                "name": "savedsearchcopy",
                "count": "[length(variables('alertArray'))]"
            },
            "dependsOn": [
                "[concat('Microsoft.OperationalInsights/workspaces/', parameters('logAnalyticsWorkspaceName'))]",
                "[concat('Microsoft.OperationalInsights/workspaces/', parameters('logAnalyticsWorkspaceName'), '/views/', variables('omsSolutions').customSolution.name)]"
            ],
            "properties": {
                "etag": "*",
                "query": "[variables('alertArray')[copyIndex()].query]",
                "displayName": "[variables('alertArray')[copyIndex()].searchName]",
                "category": "[variables('alertArray')[copyIndex()].searchCategory]"
            }
        },
        {
            "apiVersion": "2015-11-01-preview",
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches/schedules",
            "name": "[concat(parameters('logAnalyticsWorkspaceName'), '/', tolower(variables('alertArray')[copyIndex()].searchCategory), '|', toLower(variables('alertArray')[copyIndex()].searchName), '/','schedule-',uniqueString(resourceGroup().id, deployment().name,parameters('logAnalyticsWorkspaceName'), '/', variables('alertArray')[copyIndex()].searchCategory, '|', variables('alertArray')[copyIndex()].searchName))]",
            "copy": {
                "name": "schedulescopy",
                "count": "[length(variables('alertArray'))]"
            },
            "dependsOn": [
                "[concat('Microsoft.OperationalInsights/workspaces/', parameters('logAnalyticsWorkspaceName'))]",
                "[concat('Microsoft.OperationalInsights/workspaces/', parameters('logAnalyticsWorkspaceName'), '/views/', variables('omsSolutions').customSolution.name)]",
                "[concat('Microsoft.OperationalInsights/workspaces/', parameters('logAnalyticsWorkspaceName'), '/savedSearches/', tolower(variables('alertArray')[copyIndex()].searchCategory), '|', toLower(variables('alertArray')[copyIndex()].searchName))]"
            ],
            "properties": {
                "etag": "*",
                "Interval": "[variables('alertArray')[copyIndex()].scheduleIntervalInMinutes]",
                "QueryTimeSpan": "[variables('alertArray')[copyIndex()].scheduleQueryTimeSpan]",
                "enabled": true
            }
        },
        {
            "apiVersion": "2015-11-01-preview",
            "type": "Microsoft.OperationalInsights/workspaces/savedSearches/schedules/actions",
            "name": "[concat(parameters('logAnalyticsWorkspaceName'), '/', tolower(variables('alertArray')[copyIndex()].searchCategory), '|', toLower(variables('alertArray')[copyIndex()].searchName), '/','schedule-',uniqueString(resourceGroup().id, deployment().name,parameters('logAnalyticsWorkspaceName'), '/', variables('alertArray')[copyIndex()].searchCategory, '|', variables('alertArray')[copyIndex()].searchName), '/', 'alert-',uniqueString(resourceGroup().id, deployment().name,parameters('logAnalyticsWorkspaceName'), '/', variables('alertArray')[copyIndex()].searchCategory, '|', variables('alertArray')[copyIndex()].searchName))]",
            "copy": {
                "name": "actioncopy",
                "count": "[length(variables('alertArray'))]"
            },
            "dependsOn": [
                "[concat('Microsoft.OperationalInsights/workspaces/', parameters('logAnalyticsWorkspaceName'))]",
                "[concat('Microsoft.OperationalInsights/workspaces/', parameters('logAnalyticsWorkspaceName'), '/views/', variables('omsSolutions').customSolution.name)]",
                "[concat('Microsoft.OperationalInsights/workspaces/', parameters('logAnalyticsWorkspaceName'), '/savedSearches/', tolower(variables('alertArray')[copyIndex()].searchCategory), '|', toLower(variables('alertArray')[copyIndex()].searchName))]",
                "[concat('Microsoft.OperationalInsights/workspaces/', parameters('logAnalyticsWorkspaceName'), '/savedSearches/', tolower(variables('alertArray')[copyIndex()].searchCategory), '|', toLower(variables('alertArray')[copyIndex()].searchName), '/schedules/','schedule-',uniqueString(resourceGroup().id, deployment().name,parameters('logAnalyticsWorkspaceName'), '/', variables('alertArray')[copyIndex()].searchCategory, '|', variables('alertArray')[copyIndex()].searchName))]"
            ],
            "properties": {
                "etag": "*",
                "Type": "Alert",
                "Name": "[variables('alertArray')[copyIndex()].alertName]",
                "Description": "[variables('alertArray')[copyIndex()].description]",
                "Severity": "[variables('alertArray')[copyIndex()].severity]",
                "Throttling": {
                    "DurationInMinutes": "[variables('alertArray')[copyIndex()].alertThrottleInMinutes]"
                },
                "Threshold": {
                    "Operator": "[variables('alertArray')[copyIndex()].operator]",
                    "Value": "[variables('alertArray')[copyIndex()].alertTresholdValue]"
                }
            }
        }
        ,
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2016-02-01",
            "name": "deployAzureDashboards",
            "dependsOn": [
                "[concat('Microsoft.OperationalInsights/workspaces/', parameters('logAnalyticsWorkspaceName'))]",
                "[concat('Microsoft.Automation/automationAccounts/', parameters('automationAccountName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('nestedTemplates').deployDashboards]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "logAnalyticsWorkspaceName": {
                        "value": "[parameters('logAnalyticsWorkspaceName')]"
                    }
                }
            }
        }
    ],
    "outputs": {}
}